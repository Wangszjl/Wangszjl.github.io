[{"title":"04-有限元理论推导（二）","url":"/2024/09/05/有限元理论推导（二）/","content":"# 2 一维有限元方法\n\n## 2.1 背景\n本部分以加权残差法的Galerkin形式为基础介绍有限元方法。有限元方法的第一步是将感兴趣的区域分割成包含节点的子区域，或单元，并在每个单元上定义要使用的“形状”类型。一个二阶单元有三个节点，它被优化地放置在单元的中点；一个三阶单元由四个节点组成，最好在单元的三分之一间隔处放置。单元和节点的集合称为“有限元网格”。在程序中使用的形状函数的类型直接与选择的网格类型相关。\n\n## 2.2 形状函数\n在第一篇文章中，我们使用分段多项式形状函数$f_i(x)$来处理一维（1-D）热传导问题。现在，我们将正式定义分段多项式插值的过程，并展示对特定的单元使用每个单元的局部函数更方便。\n\n### 2.2.1 线性单元\n让我们从定义一个网格开始，在$0 \\leq x \\leq L$的范围内，单元不一定是等大小的。然后我们在每个单元上定义线性形状函数，如图1所示。\n<br><center>![图1 分段线性单元的形状函数](/有限元理论推导（二）/1.png)</center>\n\n这将是全局有限元网格和形状函数的表示，它允许我们描述我们问题的几何形状。如果网格由$n$个单元组成，它将有$n+1$个节点，其坐标为$x_1, x_2, \\cdots, x_\\{n+1\\}$。单元域由下式给出：\n$$\ne_i = \\{x | x_{i-1} \\leq x \\leq x_{i+1}\\}\n\\tag{2.1}$$\n\n与每个节点相关联的形状函数将被记为$N_i(x)$，并且满足$N_i(x_i) = 1$，$N_j(x_i) = 0$（对于所有$j \\neq i$），由下式给出：\n\n$$\nN_1(x) = \\begin{cases}\n\\frac{x_2-x}{h_1} & \\text{if } x \\in [x_1, x_2] \\\\\n0 & \\text{otherwise}\n\\end{cases}\\tag{2.2}\n$$\n$$\nN_i(x) = \\begin{cases}\n\\frac{x-x_{i-1}}{h_{i-1}} & \\text{if } x \\in [x_{i-1}, x_i] \\\\\n\\frac{x_{i+1}-x}{h_i} & \\text{if } x \\in [x_i, x_{i+1}]\\\\\n0 & \\text{otherwise}\n\\end{cases}\\tag{2.3}\n$$\n$$\nN_{n+1}(x) = \\begin{cases}\n\\frac{x-x_n}{h_n} & \\text{if } x \\in [x_n, x_{n+1}]\\\\\n0 & \\text{otherwise}\n\\end{cases}\\tag{2.4}\n$$\n\n其中$h_i = x_{i+1} - x_{i-1}$，对于$i = 1, 2, \\ldots, n$。\n我们现在定义$T(x)$如下：\n$$T(x)=N_1(x)T_1+N_2(x)T_2+\\cdots+N_{n+1}(x)T_{n+1}\\\\\n=\\sum^{n+1}_{i=1}N_i(x)T_i\\tag{2.5}$$\n式中$T_i$表示节点$i$，即位置$x_i$处的$T$值；$T(x)$为两个节点间的线性函数。我们考虑仅有一个单元的网格，也就是$n=1$。如果$T(x)$在两个节点之间为线性，其形式将为$T(x)=\\alpha_1+\\alpha_2x$。同时$T(x_1)=T_1$，$T(x_2)=T_2$，由此\n$$T_1=\\alpha_1+\\alpha_2x_1\\tag{2.6}\n$$\n$$T_2=\\alpha_1+\\alpha_2x_2\\tag{2.7}\n$$\n求解$\\alpha_1$和$\\alpha_2$，\n$$\\alpha_1=\\frac{T_1x_2-T_2x_1}{h_1}\\tag{2.8}\n$$\n$$\\alpha_2=\\frac{T_2-T_1}{h_1}\\tag{2.9}\n$$\n因此\n$$T(x)=\\frac{T_1x_2-T_2x_1}{h_1}+\\frac{T_2-T_1}{h_1}x\\tag{2.10}$$\n整理得到\n$$T(x)=\\Big [\\frac{x_2-x}{h_1}\\Big]T_1+\\Big [\\frac{x-x_1}{h_1}\\Big]T_2\\tag{2.11}$$\n这与方程2.5的表达式相同，其中$n = 1$。在实践中，与所考虑的特定单元相关的局部坐标系统中的每个单元进行工作将非常方便。如果我们在局部坐标系统中需要描述一个长度为$h^e$的单元，我们将使用以下形式：\n$$T^{(e)}(x)=N^{(e)}_1(x)T^{(e)}_1+N^{(e)}_2(x)T^{(e)}_2\\tag{2.12}$$\n\n式中的$(e)$表示的一个单元，\n$$N^{(e)}_1(x)=\\Big [1-\\frac{x}{h^{(e)}}\\Big ]\\tag{2.13}$$\n$$N^{(e)}_2(x)=\\frac{x}{h^{(e)}\\tag{2.14}}$$\n如图2所示，有\n$$\\frac{dT^{(e)}}{dx}=\\Bigg[\n    \\begin{matrix}\n    \\frac{dN^{(e)}_1}{dx}&\\frac{dN^{(e)}_2}{dx}\\Bigg]\n    \\end{matrix}\n    \\Bigg[\n        \\begin{matrix}T^{(e)}_1\\\\T^{(e)}_2\n        \\end{matrix}\\Bigg]=\\Bigg[\n    \\begin{matrix}\n    -\\frac{1}{h^{(e)}}&\\frac{1}{h^{(e)}}\\Bigg]\n    \\end{matrix}\n    \\Bigg[\n        \\begin{matrix}T^{(e)}_1\\\\T^{(e)}_2\n        \\end{matrix}\\Bigg]\\tag{2.15}\n    $$\n<br><center>![图2 局部节点编号，温度表示，局部形状函数](/有限元理论推导（二）/2.png)</center>\n我们同样需要局部节点和全局节点直接按的关系，如图3所示。但是在我们深入求解之前，我们将介绍一些高阶单元。\n<br><center>![图3 局部节点与全局节点间的映射关系](/有限元理论推导（二）/3.png)</center>\n\n### 2.2.2 二次单元\n从插值函数的角度来看，我们可以从图4中看到，如果我们在每个单元上使用抛物线弧而不是线性段，效果会更好。在每个单元上，函数$T^{(e)}(x)$将是二次的，因此形式为：\n\n$$\nT^{(e)}(x) = \\alpha_1 + \\alpha_2x + \\alpha_3x^2\\tag{2.16}\n$$\n\n其中我们需要三个参数来确定；因此，仅仅要求在单元的两端插值是不够的。为了得到第三个关系，我们在单元的中间引入了另一个节点，并且我们还要求在该节点处插值函数。图5为局部坐标系下的结果。\n<br>函数$N^{(e)}_i$由下式得到\n$$T^{(e)}(0)=\\alpha^{(e)}_1=T^{(e)}_1\\tag{2.17a}$$\n$$T^{(e)}(h/2)=\\alpha_1+\\frac{\\alpha_2h^{(e)}}{2}+\\frac{\\alpha_3(h^{(e)})^2}{4}=T^{(e)}_2\\tag{2.17b}$$\n$$T^{(e)}(h)=\\alpha_1+\\alpha_2 h^{(e)}+\\alpha_3(h^{(e)})^2=T^{(e)}_3\\tag{2.17c}$$\n\n<br><center>![图4 分段线性插值与分段二次插值](/有限元理论推导（二）/4.png)</center>\n<br><center>![图5 局部坐标系下的二次单元和形状函数](/有限元理论推导（二）/5.png)</center>\n\n上述方程组的解由下式给出：\n$$\\alpha_1=T^{(e)}_1$$\n$$\n\\alpha_2=\\frac{1}{h^{(e)}}(-3T_1-2T_2+T_3)\n$$\n$$\n\\alpha_3=\\frac{2}{(h^{(e)})^2}(T_1-2T_2+T_3)\n$$\n将上式代入方程（2.16）中并整理，得到\n$$T^{(e)}=\\Bigg [1-3\\Bigg[\\frac{x}{h^{(e)}}\\Bigg]+2\\Bigg[\\frac{x}{h^{(e)}}\\Bigg]^2\\Bigg]T_1+4\\Bigg[\\frac{x}{h^{(e)}}\\Bigg]\\Bigg[1-\\frac{x}{h^{(e)}}\\Bigg]T_2\\\\+\\Bigg[\\frac{x}{h^{(e)}}\\Bigg]\\Bigg[2\\Bigg[\\frac{x}{h^{(e)}}\\Bigg]-1\\Bigg]T_3$$\n因此，形状函数为\n$$N^{(e)}_1(x)=1-3\\Bigg[\\frac{x}{h^{(e)}}\\Bigg]+2\\Bigg[\\frac{x}{h^{(e)}}\\Bigg]^2\\tag{2.18a}$$\n$$N^{(e)}_2(x)=4\\Bigg[\\frac{x}{h^{(e)}}\\Bigg]\\Bigg[1-\\frac{x}{h^{(e)}}\\Bigg]\\tag{2.18b}$$\n$$N^{(e)}_3(x)=\\frac{x}{h^{(e)}}\\Bigg[2\\frac{x}{h^{(e)}}-1\\Bigg]\\tag{2.18c}$$\n在这种情况下，用于将全局系统与局部参考系统关联的表示法在图2.6中展示，该图展示了一个由$n$个二次元素组成的网格。这里的第 $i$个元素被定义为\n$$e_i=\\{x|x_{2i-1}\\le x\\le x_{2i+1}\\}\\tag{2.19}$$\n<br><center>![图6 二次单元局部和全局坐标系之间的关系，三角形表示每个单元的内部节点](/有限元理论推导（二）/6.png)</center>\n元素的长度由下式给出：\n$$h^{(i)}=x_{2i+1}-x_{2i-1}\\tag{2.20}$$\n函数$T^{(e)}(x)$的导数分别由方程（2.20）和方程（2.21）得到:\n$$T^{(e)}(x)=N^{(e)}_1T^{(e)}_1+N^{(e)}_2(x)T^{(e)}_2+N^{(e)}_3(x)T^{(e)}_3=\\\\\n\\Bigg[\n    \\begin{matrix}\n    N^{(e)}_1&N^{(e)}_2&N^{(e)}_3\n    \\end{matrix}\n    \\Bigg]\n    \\Bigg[\n        \\begin{matrix}\n            T^{(e)}_1\\\\\n            T^{(e)}_2\\\\\n            T^{(e)}_3\n        \\end{matrix}\n        \\Bigg]\\tag{2.21}\n$$\n$$\\frac{dT^{(e)}}{dx}=\\Bigg[\n    \\begin{matrix}\n    \\frac{1}{h^{(e)}}\\Bigg (4\\frac{x}{h^{(e)}}-3\\Bigg)&\n    \\frac{4}{h^{(e)}}\\Bigg (1-2\\frac{x}{h^{(e)}}\\Bigg)&\n    \\frac{1}{h^{(e)}}\\Bigg (4\\frac{x}{h^{(e)}}-1\\Bigg) \\Bigg]\n    \\end{matrix}\\\\\n        \\Bigg[\n        \\begin{matrix}\n            T^{(e)}_1\\\\\n            T^{(e)}_2\\\\\n            T^{(e)}_3\n        \\end{matrix}\n        \\Bigg]\\tag{2.22}\n$$\n需要注意的是每个单元不再是常数。\n\n### 2.2.3 三次单元\n我们可以继续提高近似的阶数。在这种情况下，我们使用三次函数，即\n$$\nT^{(e)}(x)=\\alpha_1+\\alpha_2x+\\alpha_3x^2+\\alpha_4x^3\\tag{2.23}\n$$\n在这种情况下，每个单元需要四个节点。对于最佳的近似属性，这些节点最好位于$x = 0, h^{(e)}/3, 2h^{(e)}/3, h^{(e)}$的位置。按照与线性和二次单元相同的过程，我们可以找到形状函数。\n$$N^{(e)}_1(x)=\\Bigg(1-\\frac{3x}{h^{(e)}}\\Bigg)\\Bigg(1-\\frac{3x}{2h^{(e)}}\\Bigg)\\Bigg(1-\\frac{x}{h^{(e)}}\\Bigg)\\tag{2.24a}$$\n$$N^{(e)}_2(x)=\\frac{9x}{h^{(e)}}\\Bigg(1-\\frac{3x}{2h^{(e)}}\\Bigg)\\Bigg(1-\\frac{x}{h^{(e)}}\\Bigg)\\tag{2.24b}$$\n$$N^{(e)}_3(x)=-\\frac{9x}{2h^{(e)}}\\Bigg(1-\\frac{3x}{h^{(e)}}\\Bigg)\\Bigg(1-\\frac{x}{h^{(e)}}\\Bigg)\\tag{2.24c}$$\n$$\nN^{(e)}_4(x)=\\frac{x}{h^{(e)}}\\Bigg(1-\\frac{3x}{h^{(e)}}\\Bigg)\\Bigg(1-\\frac{3x}{2h^{(e)}}\\Bigg)\\tag{2.24c}\n$$\n关于之前定义的单元，需要注意以下几点：\n1. 尽管二次和三次单元的导数是独立变量$x$的函数，但它们在单元间的节点处不会连续。这里使用的插值类型被称为拉格朗日插值，它只保证函数在元素边界处的连续性。这些元素被称为$C^0$元素，其中零上标意味着只有零阶导数是连续的，即函数本身。\n2. 显然，甚至更高阶的元素，例如四次、五次等，可以通过在元素中添加更多的插值节点来构建。实际上，我们可以构建在节点处也插值导数的单元。最简单的这类元素是立方埃尔米特元素，它在位于单元两端的节点处插值函数及其一阶导数。这些是$C^1$元素，因为现在一阶导数将在整个域中连续。甚至可以构建更复杂的单元。事实上，几乎没有限制可以达到的复杂度或预设单元行为的程度。然而，必须牢记，单元越复杂，计算成本就越高。实际上，在多维计算中，立方单元已经变得过于昂贵，很少用于流体和热传递应用。\n3. 之前考虑的元素插值函数具有如下性质：$N_i(x)e_j = \\delta_{ij}$，其中 $\\delta_{ij}$ 是克罗内克 delta 函数，即，\n   $$\n   \\delta_{ij} = \\begin{cases} \n     1, & \\text{if } i = j \\\\\n     0, & \\text{if } i \\neq j \n   \\end{cases}\\tag{3.25}\n   $$\n\n   并且 $x_j$ 是节点坐标。\n4. 所选择的插值类型定义了依赖变量在元素内可以采取的“形状”，即线性的、二次等。因此，使用“形状函数”这个名称来表示定义元素的函数 $N_i$。还应注意，高阶函数总是精确地简化为低阶函数；即，二次元素精确地表示线性函数和常数函数，立方元素表示二次、线性和常数函数等。这一事实保证了如果使用高阶元素，可以获得更好的近似。\n\n## 2.3 稳态传导方程\n### 2.3.1 Galerkin表述\n考虑在区间$0 \\leq x \\leq L$上找到温度分布$T = T(x)$的问题，它满足具有内部热源的稳态1-D方程：\n\n$$\n-K\\frac{d^2T}{dx^2}=Q, 0<x<L\\tag{2.26}\n$$\n边界条件为\n$$-K\\frac{dT}{dx}=q,x=0\\tag{2.27}\n$$\n$$T=T_L,x=L\\tag{2.28}$$\n方程（2.26）的加权残差表达式为\n$$\\int^L_0W\\Bigg(-K\\frac{d^2T}{dx^2}-Q\\Bigg)dx=0\\tag{2.29}\n$$\n进一步写成\n$$\n\\int^L_0\\Bigg(-K\\frac{d^T}{dx^2}-Q\\Bigg)dx=\\sum^2_{i=1}\\int^{x_{i+1}}_{x_i}W\\Bigg(-K\\frac{d^T}{dx^2}-Q\\Bigg)dx\\\\\n=\\int^{L/2}_0W\\Bigg(-K\\frac{d^T}{dx^2}-Q\\Bigg)dx+\\\\\n\\int^{L}_{L/2}W\\Bigg(-K\\frac{d^T}{dx^2}-Q\\Bigg)dx=0\\tag{2.30}\n$$\n全局函数$T(x)$由下式近似得到：\n$$\nT(x)=\\sum^3_{j=1}N_j(x)T_j\\\\=N_1(x)T_1+N_2(x)T_2+N_3(x)T_3 \\tag{2.31}$$\n式中形状函数$N_i(x),i=1,2,3$，由方程（2.2）至（2.4）给出，其中$n=2$，$x_1=0,x_2=L/2,x_3=L$。\n令$W_i(x)=N_i(x)$，式（2.20）的伽辽金形式变为\n$$\n\\int^{L/2}_0\\Bigg[K\\frac{dN_i}{dx}\\Bigg(\\sum^3_{j=1}\\frac{dN_j}{dx}T_j\\Bigg)-N_iQ\\Bigg]dx+\\Bigg[N_i\\Bigg(-K\\frac{dT}{dx}\\Bigg)\\Bigg]^{L/2}_0\\\\\n+\\int^L_{L/2}\\Bigg[K\\frac{dN_i}{dx}\\Bigg(\\sum^3_{j=1}\\frac{dN_j}{dx}T_j\\Bigg)-N_iQ\\Bigg]dx+\\Bigg[N_i\\Bigg(-K\\frac{dT}{dx}\\Bigg)\\Bigg]^L_{L/2}\\\\\n=0,i=1,2,3\\tag{2.32}\n$$\n方程（2.32）的前两项分别对应单元$e_1$和$e_2$。现在一次考虑其中的每一个，使用局部单元坐标。对于元素$e_1$，$N_3(x) = 0$；因此，我们可以将来自$i = 1, 2$的方程以矩阵形式写成\n$$\n\\int^{L/2}_0\\Bigg\\{K\\Bigg(\\Bigg[\n    \\begin{matrix}\n        \\frac{dN^{(e_1)}_1}{dx}\\\\\n        \\frac{dN^{(e_2)}_2}{dx}\\\\\n    \\end{matrix}\n    \\Bigg]\n    \\Bigg[\n        \\begin{matrix}\n        \\frac{dN^{(e_1)}_1}{dx}&\n        \\frac{dN^{(e_2)}_2}{dx}\n        \\end{matrix}\n        \\Bigg]\\Bigg)\n        \\Bigg[\n        \\begin{matrix}\n            T^{(e_1)}_1\\\\\n            T^{(e_2)}_2\n        \\end{matrix}\n         \\Bigg]-\n         \\Bigg[\n        \\begin{matrix}\n            N^{(e_1)}_1\\\\\n            N^{(e_2)}_2\n        \\end{matrix}\n         \\Bigg]Q\n        \\Bigg\\}dx\\\\\n        +\\Bigg\\{\n        \\Bigg[\n            \\begin{matrix}\n            N^{(e_1)}_1\\\\\n            N^{(e_2)}_2\n            \\end{matrix}\n        \\Bigg]\\Bigg(-K\\frac{dT}{dx}\\Bigg)\\Bigg\\}^{L/2}_0=\n        \\Bigg[\n        \\begin{matrix}\n            0\\\\0\n        \\end{matrix}\n        \\Bigg]\\tag{2.33}\n$$\n根据方程（2.14）和（2.15）以及$h^{(e_1)}=L/2$，方程（2.33）变为\n$$\n\\int^{L/2}_0\\Bigg\\{K\\Bigg[\n    \\begin{matrix}\n    \\frac{4}{L^2}&-\\frac{4}{L^2}\\\\\n    -\\frac{4}{L^2}&\\frac{4}{L^2}\\\\\n    \\end{matrix}\n    \\Bigg]\n    \\Bigg[\n    \\begin{matrix}\n    T^{(e_1)}_1\\\\\n    T^{(e_1)}_2\n    \\end{matrix}    \n    \\Bigg]-\n    \\Bigg[\n    \\begin{matrix}\n    1-\\frac{2x}{L}\\\\\n    \\frac{2x}{L}    \n    \\end{matrix}\n    \\Bigg]Q\n    \\Bigg\\}dx\\\\\n    +\\Bigg[\n    \\begin{matrix}\n    -\\Bigg(\n    -K\\frac{dT}{dx}    \n    \\Bigg)_{x=0}\\\\\n    \\Bigg(\n    -K\\frac{dT}{dx}    \n    \\Bigg)_{x=L/2}\n    \\end{matrix}\n    \\Bigg]=\\Bigg[\n        \\begin{matrix}\n         0\\\\0   \n        \\end{matrix}\n        \\Bigg]\n$$\n应用方程（2.27）并积分，我们最终获得单元$e_1$的表达式\n$$\n\\frac{2K}{L}\\Bigg[\n    \\begin{matrix}\n    1&-1\\\\\n    -1&1\n    \\end{matrix}\n    \\Bigg]\n    \\Bigg[\n    \\begin{matrix}\n    T_1\\\\T_2\n    \\end{matrix}    \n    \\Bigg]=\\frac{QL}{4}\\Bigg[\n    \\begin{matrix}\n    1\\\\1    \n    \\end{matrix}\n    \\Bigg]+\n    \\Bigg[\n    \\begin{matrix}\n    q\\\\\n    -\\Bigg(-K\\frac{dT}{dx}\\Bigg)_{x=L/2}\n    \\end{matrix}\n    \\Bigg]\n$$\n在这里，我们使用了单元$e_1$中自由度的全局编号，即$T_1$和 $T_2$。以类似的方式，我们得到单元$e_2$的方程为:\n$$\n\\frac{2K}{L}\\Bigg[\n    \\begin{matrix}\n    1&-1\\\\\n    -1&1\n    \\end{matrix}\n    \\Bigg]\n    \\Bigg[\n    \\begin{matrix}\n    T_2\\\\T_3\n    \\end{matrix}    \n    \\Bigg]=\\frac{QL}{4}\\Bigg[\n    \\begin{matrix}\n    1\\\\1    \n    \\end{matrix}\n    \\Bigg]+\n    \\Bigg[\n    \\begin{matrix}\n    \\Bigg(-K\\frac{dT}{dx}\\Bigg)_{x=L/2}\\\\\n    -\\Bigg(-K\\frac{dT}{dx}\\Bigg)_{x=L}\n    \\end{matrix}\n    \\Bigg]\n$$\n现在必须将每个元素的积分加在一起，以得到完整的方程组。这个操作被称为“组装”方程，并产生最终的全局$3\\times 3$矩阵。这是使用方程和自由度的全局编号来完成的；这个过程如图7所示，并且等同于将不同单元中由同一权重函数产生的方程贡献相加。在这种情况下，对应于 $W_2=N_2$的每个单元的贡献如图7所示相加。在实践中，这是通过使用单元矩阵中的全局自由度编号，并将它们的贡献添加到全局矩阵中的相应位置来实现的。例如，在单元$2$中，位置$(1,2)$对应于全局系统中的$(2,3)$，并将条目 $-2k/L$ 添加到全局矩阵的位置$(2,3)$.在图7中可以清楚地看到，涉及内部节点通量的表达式相互抵消；实际上，这正好说明通量在内部必须是连续的。因此，在构建单元方程时，这些项通常被省略。然而，如果省略了这些项，元素方程中的等式就不成立。尽管如此，习惯上会将涉及通量的项，例如方程（3.35），设置为等于零。因此，全局方程组变为：\n$$\n\\frac{2K}{L}\n\\Bigg[\n\\begin{matrix}\n1&-1&0\\\\\n-1&2&-1\\\\\n0&-1&1\n\\end{matrix}\n\\Bigg]\\Bigg[\n    \\begin{matrix}\n    T_1\\\\\n    T_2\\\\\n    T_3    \n    \\end{matrix}\n    \\Bigg]=\n    \\frac{QL}{4}\n    \\Bigg[\n    \\begin{matrix}\n     1\\\\2\\\\1   \n    \\end{matrix}\n    \\Bigg]\n    +\\\\\n        \\Bigg[\n    \\begin{matrix}\n     q\\\\\n     0\\\\\n     -\\Bigg(-K\\frac{dT}{dx}\\Bigg)_{x=L} \n    \\end{matrix}\n    \\Bigg]\\tag{2.36}\n$$\n在最后一个等式中，在$x=L$处出现了热通量。然而，如将其认为$T_3$处的公式，因为$T_3$已知且$x=L$处的热通量在前两个方程中没有出现，这个方程可以忽略并且重写为\n$$\n\\frac{2K}{L}\\Bigg[\n    \\begin{matrix}\n    1&-1\\\\\n    -1&2\n    \\end{matrix}\n    \\Bigg]\n    \\Bigg[\n    \\begin{matrix}\n    T_1\\\\\n    T_2\n    \\end{matrix}\n    \\Bigg]=\n    \\frac{QL}{4}\n    \\Bigg[\n    \\begin{matrix}\n    1\\\\\n    2\n    \\end{matrix}\n    \\Bigg]+\n    \\Bigg[\n    \\begin{matrix}\n    q\\\\\n    0\n    \\end{matrix}\n    \\Bigg]+\\\\\n    \\frac{2K}{L}T_L\n    \\Bigg[\n    \\begin{matrix}\n    0\\\\\n    1\n    \\end{matrix}\n    \\Bigg]\\tag{2.37}\n$$\n上式可以求解出$T_1$和$T_2$。一旦求解完成后，第三个等式可用于计算右侧边界处的热传导，即\n$$\n\\Bigg(-K\\frac{dT}{dx}\\Bigg)_{x=L}=\\frac{2K}{L}(T_2-T_L)+\\frac{QL}{4}\\tag{2.38}$$\n<br><center>![图7 二元系统方程组装](7.png)</center>\n现在使用二次单元离散化区域，来近似方程（2.26）至（2.28）。我们现在使用相同数量的节点，但是是更高阶的近似。伽辽金描述与之前相似。由于局部和全局坐标系对于一个单元都是相同的，我们可以写成\n$$\\int^L_0\\Bigg[K\\frac{dN_i}{dx}\\Bigg(\\sum^3_{j=1}\\frac{dN_j}{dx}T_j\\Bigg)-N_iQ\\Bigg]dx+\\Bigg[N_i\\Bigg(-K\\frac{dT}{dx}\\Bigg)\\Bigg]^L_0=0\\tag{2.39}$$\n根据方程（3.18）、（3.21）和（3.23），得到矩阵形式：\n$$\n\\int^L_0\\Bigg\\{K\\Bigg(\\Bigg[\n    \\begin{matrix}\n    \\frac{1}{L}(\\frac{4x}{L}-3)\\\\\n    \\frac{4}{L}(1-\\frac{2x}{L})\\\\\n    \\frac{1}{L}(\\frac{4x}{L}-1) \n    \\end{matrix}\n    \\Bigg]\n    \\Bigg[\n    \\begin{matrix}\n    \\frac{1}{L}(\\frac{4x}{L}-3)&\n    \\frac{4}{L}(1-\\frac{2x}{L})&\n    \\frac{1}{L}(\\frac{4x}{L}-1)\n    \\end{matrix}\n    \\Bigg]\n    \\Bigg)\n    \\Bigg[\n    \\begin{matrix}\n    T_1\\\\T_2\\\\T3\n    \\end{matrix}\n    \\Bigg]\\\\\n    -\\Bigg[\n    \\begin{matrix}\n    1-\\frac{3x}{L}+2(\\frac{x}{L})^2\\\\\n    \\frac{4x}{L}(1-\\frac{x}{L})\\\\\n    \\frac{x}{L}(\\frac{2x}{L}-1)\n    \\end{matrix}\n    \\Bigg]Q\n    \\Bigg\\}dx=\n    \\Bigg[\n    \\begin{matrix}\n    q\\\\0\\\\\n    -(-K\\frac{dT}{dx})_{x=L}\n    \\end{matrix}\n    \\Bigg]\\tag{2.40}\n$$\n积分后得到\n$$\n\\frac{K}{6L}\\Bigg[\n\\begin{matrix}\n14&-16&2\\\\\n-16&32&-16\\\\\n2&-16&14\n\\end{matrix}    \n\\Bigg]\n\\Bigg[\n\\begin{matrix}\nT_1\\\\T_2\\\\T_3\n\\end{matrix}\n\\Bigg]=\\frac{QL}{6}\n\\Bigg[\n\\begin{matrix}\n1\\\\4\\\\1\n\\end{matrix}\n\\Bigg]+\n\\Bigg[\n\\begin{matrix}\nq\\\\0\\\\-(-K\\frac{dT}{dx})_{x=L}\n\\end{matrix}\n\\Bigg]\\tag{2.41}$$\n最后一个方程考虑$T_3=T_L$后消掉，最后的系统变为\n$$\n\\frac{K}{6L}\\Bigg[\n\\begin{matrix}\n14&-16\\\\\n-16&32\\\\\n\\end{matrix}    \n\\Bigg]\n\\Bigg[\n\\begin{matrix}\nT_1\\\\T_2\n\\end{matrix}\n\\Bigg]=\\frac{QL}{6}\n\\Bigg[\n\\begin{matrix}\n1\\\\4\n\\end{matrix}\n\\Bigg]+\n\\Bigg[\n\\begin{matrix}\nq\\\\0\n\\end{matrix}\n\\Bigg]+\\frac{K}{6L}T_L\\Bigg[\n    \\begin{matrix}\n    -2\\\\16    \n    \\end{matrix}\\Bigg]\\tag{2.42}$$\n右侧边界的热通量由下式给出\n$$\n\\Bigg(-K\\frac{dT}{dx}\\Bigg)_{x=L}=\\frac{K}{6L}(16T_2-2T_1-14T_L)+\\frac{QL}{6}\\tag{2.43}$$\n### 2.3.2 可变传导和边界对流\n我们现在将有限元算法扩展到解决薄杆上的稳态温度分布问题，该杆的左端受到对流热负荷，$x = 0$，右端保持固定温度$T_L$，$x = L$。我们还假设没有内部热源（即$Q = 0$），但杆的热导率随$x$变化（由于材料组成的变化或杆的横截面变化），即$K = K(x)$。描述这个问题的微分方程是：\n\n$$\n\\frac{d}{dx}\\left(K(x) \\frac{dT}{dx}\\right) = 0\\tag{2.44}\n$$\n其中\n$$-K\\frac{dT}{dx}+h(T-T_\\infty)=0,x=0\\\\\nT=T_L,x=L\\tag{2.45}$$\n式中，$T_\\infty$为外部参考温度，$h$为热传递参数\n加权残差形式为\n$$\n\\int^L_0K(x)\\frac{dW}{dx}\\frac{dT}{dx}dx-\\Bigg[W\\Bigg(-K(x)\\frac{dT}{dx}\\Bigg)\\Bigg]_{x=L}=0\\tag{2.47}\n$$\n从现在开始，我们将省略对应于规定温度的边界上的通量项，在这种情况下是$x = L$，这是有限元建模中的惯例。如果我们还用方程（2.45）替换左端边界的通量，我们有\n$$\n\\int^L_0K(x)\\frac{dW}{dx}\\frac{dT}{dx}dx+Wh(T-T_\\infty)|_{x=0}=0\\tag{2.48}$$\n请注意，从方程（2.44）到（2.48）的过程中并没有丢失任何信息；然而，我们不是寻求方程（2.48）的解析解，而是寻求利用我们定义的形状函数和网格离散化的可计算有限元近似。 与之前一样，我们在$0\\le x\\le L$上定义一个网格，并通过以下方式近似$T(x)$：\n$$\nT(x)=\\sum^{n+1}_{i=1}N_i(x)T_i\\tag{2.49}$$\n式中$n$为网格中的单元个数。如果$N_i,i=1,\\cdots,n+1$为线性形状函数，则方程（2.48）的伽辽金形式为\n$$\n\\int^L_0K(x)\\frac{dN_i}{dx}\\Bigg(\\sum^{n+1}_{j=1}\\frac{dN_j}{dx}T_j\\Bigg)dx+N_ih(T-T_\\infty)|_{x=0}=0\\tag{2.50}$$\n不代入$K(x)$的特定形式，我们将使用与$T(x)$选择的相同形状函数（在这种情况下是线性的）来插值$K(x)$的节点值，即在每个单元上$K^{(e)}(x) = N^{(e)}_1(x)K^{(e)}_1 +N^{(e)}_2(x)K^{(e)}_2$。第一个单元（包括对流边界条件）的方程为：\n$$\n\\int^{x_2}_{x_1}\\Bigg[\n    \\begin{matrix}\n    N^{(e_1)}_1&N^{(e_2)}_2\n    \\end{matrix}\n    \\Bigg]\n    \\Bigg[\n    \\begin{matrix}\n    K^{(e_1)}_1\\\\ K^{(e_2)}_2\n    \\end{matrix}\n    \\Bigg]\n    \\Bigg(\n    \\Bigg[\n     \\begin{matrix}\n    \\frac{dN^{(e_1)}_1}{dx}\\\\\n    \\frac{dN^{(e_2)}_2}{dx}\n     \\end{matrix}   \n    \\Bigg]\n    \\Bigg[\n    \\begin{matrix}\n    \\frac{dN^{(e_1)}_1}{dx}&\n    \\frac{dN^{(e_2)}_2}{dx}\n    \\end{matrix}\n    \\Bigg]\n    \\Bigg)dx\n    \\Bigg[\n    \\begin{matrix}\n    T^{(e_1)}_1\\\\\n    T^{(e_2)}_2\n    \\end{matrix}    \n    \\Bigg]\\\\\n    +\\Bigg[\\begin{matrix}\n    h&0\\\\\n    0&0\n    \\end{matrix}\n    \\Bigg]\\Bigg[\n    \\begin{matrix}\n    T^{(e_1)}_1\\\\\n    T^{(e_2)}_2\n    \\end{matrix}    \n    \\Bigg]=hT_\\infty\\Bigg[\n    \\begin{matrix}\n    1\\\\0    \n    \\end{matrix}\n    \\Bigg]\n$$\n考虑到在守恒边界项有$N^{(e_1)}_1(0)=1$和$N^{(e_1)}_2(0)=1$，即\n$$\nN_ih(T-T_\\infty)|_{x=0}=\\Bigg[\n    \\begin{matrix}\n    N_1\\\\N_2\n    \\end{matrix}\n    \\Bigg]h\\Bigg[\n    \\begin{matrix}\n    N_1&N_2   \n    \\end{matrix}\n    \\Bigg]\n    \\Bigg[\n    \\begin{matrix}\n    T_1-T_\\infty\\\\\n    T_2-T_\\infty\n    \\end{matrix}\n    \\Bigg]\\Bigg|_{x=0}\\\\\n    =\\Bigg(\n    \\Bigg[\n    \\begin{matrix}\n    N_1\\\\N_2 \n    \\end{matrix}\n    \\Bigg]\n    \\Bigg[\n    \\begin{matrix}\n    N_1&N_2    \n    \\end{matrix}\n    \\Bigg]\n    \\Bigg[\n    \\begin{matrix}\n    T_1\\\\T_2\n    \\end{matrix}\n    \\Bigg]-\n    \\Bigg[\n    \\begin{matrix}\n    N_1\\\\N_2    \n    \\end{matrix}\n    \\Bigg]hT_\\infty\n    \\Bigg)\\Bigg|_{x=0}\\\\\n    =h\\Bigg[\n    \\begin{matrix}\n    1&0\\\\\n    0&0    \n    \\end{matrix}    \n    \\Bigg]\n    \\Bigg[\n    \\begin{matrix}\n    T_1\\\\T_2    \n    \\end{matrix}\n    \\Bigg]-hT_\\infty\\Bigg[\n    \\begin{matrix}\n    1\\\\0\n    \\end{matrix}    \n    \\Bigg]\n$$\n积分后得到\n$$\n\\frac{1}{2h^{(e_1)}}(K^{(e_1)}_1+K^{(e_1)}_2)\\Bigg[\n\\begin{matrix}\n1&-1\\\\\n-1&1    \n\\end{matrix}    \n\\Bigg]\n\\Bigg[\n\\begin{matrix}\nT^{(e_1)}_1\\\\\nT^{(e_1)}_2\n\\end{matrix}\n\\Bigg]+\n\\Bigg[\n\\begin{matrix}\nh&0\\\\\n0&0    \n\\end{matrix}\n\\Bigg]\n\\Bigg[\n\\begin{matrix}\nT^{(e_1)}_1\\\\\nT^{(e_1)}_2    \n\\end{matrix}\n\\Bigg]=hT_\\infty\\Bigg[\n\\begin{matrix}\n1\\\\0    \n\\end{matrix}    \n\\Bigg]\\tag{2.51}\n$$\n对所有单元，$e_i\\neq e_1$，方程为\n$$\n\\frac{1}{2h^{(e_1)}}(K^{(e_1)}_1+K^{(e_1)}_2)=\\Bigg[\n\\begin{matrix}\n1&-1\\\\\n-1&1    \n\\end{matrix}    \n\\Bigg]\n\\Bigg[\n\\begin{matrix}\nT^{(e_1)}_1\\\\T^{(e_1)}_2\n\\end{matrix}\n\\Bigg]=\\Bigg[\n\\begin{matrix}\n0\\\\0\n\\end{matrix}    \n\\Bigg]\\tag{2.52}\n$$\n如果区间$0\\le x\\le L$被离散为2个相等长度的单元，组装后的方程为\n$$\n\\frac{1}{L}\\Bigg[\n\\begin{matrix}\nK_1+K_2+Lh&-(K_1+K_2)&0\\\\\n-(K_1+K_2)&K_1+2K_2+K_3&-(K_2+K_3)\\\\\n0&-(K_2+K_3)&K_2+K_3\n\\end{matrix}    \n\\Bigg]\n\\Bigg[\n\\begin{matrix}\nT_1\\\\T_2\\\\T_3\n\\end{matrix}    \n\\Bigg]=\\Bigg[\n\\begin{matrix}\nhT_\\infty\\\\\n0\\\\0\n\\end{matrix}    \n\\Bigg]\\tag{2.53}$$\n如果在$x = L$处给出了形式如方程（2.45）的对流边界条件，那么最后一个单元的方程可以从加权残差形式（2.47）得出。然后，忽略第二个单元中的第一个边界项，并在第二个项中替换对流条件，得到单元方程为\n$$\n\\frac{1}{2h^{(e_n)}}(K^{(e_n)}_1+K^{(e_n)}_2)\\Bigg[\n\\begin{matrix}\n1&-1\\\\\n-1&1    \n\\end{matrix}    \n\\Bigg]\n\\Bigg[\n\\begin{matrix}\nT^{(e_n)}_1\\\\T^{(e_n)}_2\n\\end{matrix}\n\\Bigg]+\n\\Bigg[\n\\begin{matrix}\n0&0\\\\\n0&-h    \n\\end{matrix}    \n\\Bigg]\n\\Bigg[\n\\begin{matrix}\nT^{(e_n)}_1\\\\T^{(e_n)}_2\n\\end{matrix}\n\\Bigg]\n=\\Bigg[\n\\begin{matrix}\n0\\\\0\n\\end{matrix}    \n\\Bigg]\\tag{2.54}\n$$\n对流边界条件可以应用于网格的任一或两个边界；方程（2.51）、（2.52）和（2.54）对于任何网格（均匀或非均匀）、变导热性和任一或两个边界处的对流都是有效的。在定义网格的节点坐标和各种问题数据 $h$、$T_\\infty$ 和 $K(x)$ 后，可以获得特定解。\n## 2.4 轴对称热传导\n许多涉及流体在管道中流动的稳态热传导问题都涉及到轴对称形式。为了开发相应的有限元算法，方程（2.44）至（2.46）的轴对称形式是：\n\n$$\n\\frac{1}{r}\\frac{d}{dr}\\left(r\\frac{dT}{dr}\\right) = Q,r_1<r<r_2\\tag{2.58}\n$$\n\n加上边界条件：\n\n$$\n-\\frac{dT}{dr} + h(T - T_{\\infty}) = 0 \\quad \\text{at } r = r_1\\tag{2.59}\n$$\n\n和\n\n$$\nT = T_L \\quad \\text{at } r = r_2\\tag{2.60}\n$$\n\n其中 $r_1$ 和 $r_2$ 分别是内半径和外半径，$T_{\\infty}$ 是外部参考温度，$h$ 是对流换热系数。\n方程（2.58）的加权残差形式为\n$$\n\\int^{2\\pi}_0\\int^{r_2}_{r_1}W\\Bigg[\n    -\\frac{d}{dr}\\Bigg(rK\\frac{dT}{dr}\\Bigg)\\Bigg]drd\\theta=0\\tag{2.61}$$\n分别对$r$和$\\theta$积分，我们得到\n$$\n2\\pi\\int^{r_2}_{r_1}rK\\frac{dW}{dr}\\frac{dT}{dr}dr+(2\\pi rWh(T-T_\\infty))_{r=r_1}=0\\tag{2.62}$$\n比较方程（2.62）与方程（2.47），轴对称情况下的显著区别在于$K(x)$被替换为$rK$。物理上，平滑变化的热导率并不是特别重要，而突然变化（恒定）的热导率则很重要，例如，材料的变化或包裹在管道上的热绝缘可能会产生显著的变化。因此，可以通过将$K$移到积分之外来简化方程(2.62)，假设积分将根据$K$的阶跃变化分段计算。单元$e_1=\\{r|r^{(e_1)}_1\\le r\\le r^{(e_1)}_2\\}$轴对称的伽辽金积分可以写成\n$$\n\\Bigg\\{\n\\frac{K^{(e_i)}}{2h^{(e_i)}}    (r^{(e_1)}_1+r^{(e_1)}_2)\n\\Bigg[\n\\begin{matrix}\n1&-1\\\\\n-1&1\n\\end{matrix}\n\\Bigg]\n+r_1h\\Bigg[\n\\begin{matrix}\n1&0\\\\\n0&0 \n\\end{matrix}    \n\\Bigg]\\delta_{e_1}\n-r_2h\\Bigg[\n\\begin{matrix}\n0&0\\\\\n0&1 \n\\end{matrix}    \n\\Bigg]\\delta_{e_n}\n\\Bigg[\n\\begin{matrix}\nT^{(e_i)}_1\\\\\nT^{(e_i)}_2\n\\end{matrix}\n\\Bigg]\n\\Bigg\\}\\\\\n=\\Bigg\\{\nr_1hT_\\infty\\Bigg[\n\\begin{matrix}\n1\\\\0\n\\end{matrix}\n\\Bigg]\\delta_{e_1}-\nr_2hT_\\infty\\Bigg[\n\\begin{matrix}\n0\\\\1\n\\end{matrix}\n\\Bigg]\\delta_{e_n}\n\\Bigg\\}\\tag{2.63}\n$$\n式中，$\\delta_{e_i}$为Kronecker delata函数，即在单元$e_i$处$\\delta_{e_i}=1$，而对所有$j\\neq i$的单元$e_j$处为0；\n$n$表示单元编号，所以$e_n$为右侧边界的单元。\n## 2.5 自然坐标系统\n我们现在引入一个自然坐标系统来指定单元上的局部操作。我们将单元定义在区间 $-1 \\leq \\xi \\leq 1$，并与变换形式相结合：\n$$\nx=\\frac{1}{2}(1-\\xi)x_i+\\frac{1}{2}(1+\\xi)x_{i+1}\\tag{2.64}\n$$\n这个形式将区间$-1\\le\\xi\\le 1$映射到了单元的区间$x_i\\le x\\le x_{i+1}$上。线性单元形状函数如图8所示，并由下式给出：\n$$\nN_1(\\xi)=\\frac{1}{2}(1-\\xi)\\\\\nN_2(\\xi)=\\frac{1}{2}(1+\\xi) \\tag{2.65}\n$$\n<br><center>![图8 自然局部坐标系下线性形状函数](8.png)</center>\n使用这种类型的坐标系统，如果注意到，可以通过变换（2.64）来分析形状函数及其导数的乘积：\n$$\n\\frac{d}{dx}=\\frac{d}{d\\xi}\\frac{d\\xi}{dx}=\\frac{2}{h^{(e_i)}}\\frac{d}{d\\xi}\\tag{2.66}$$\n和\n$$\ndx=\\frac{h^{(e_i)}}{2}d\\xi\\tag{2.67}\n$$\n注意到方程（2.64）可以写成\n$$\nx=N_1(\\xi)x_1+N_2(\\xi)x_2\n$$\n因此，变换可以严格地用形状函数和节点坐标来表示。形状函数的积分和导数具有以下形式：\n$$\n\\int^{x_{i+1}}_{x_i}N_j(x)N_k(x)dx=\\frac{h{(e_1)}}{2}\\int^1_{-1}N_j(\\xi)N_k(\\xi)d\\xi\\tag{2.68}\n$$\n$$\n\\int^{x_{i+1}}_{x_i}\\frac{dN_j}{dx}\\frac{dN_k}{dx}dx=\\frac{2}{h^{(e_i)}}\\int^1_{-1}\\frac{dN_j}{d\\xi}\\frac{dN_k}{d\\xi}d\\xi\\tag{2.69}\n$$\n$$\n\\int^{x_{i+1}}_{x_i}\\frac{dN_j}{dx}N_k(x)dx=\\int^1_{-1}N_k(\\xi)d\\xi\\tag{2.70}\n$$\n此外，方程(2.68)中的函数乘积可以很容易地用指数形式进行解析评估。这个程序在结构力学中是众所周知的，并且可以很容易地用于任何一维元素网格。积分关系表达为\n$$\n\\int^1_{-1}(N_1(\\xi))^a(N_2(\\xi))^bd\\xi=2\\frac{a!b!}{(1+a+b)!}\\tag{2.71}\n$$\n式中$a$和$b$为无符号整数。我们可以对更高阶的单元使用自然坐标系，特别是二次单元。自然坐标系下的形状函数为\n$$\nN_1(\\xi)=\\frac{1}{2}\\xi(\\xi-1)\\tag{2.74}\n$$\n$$\nN_2(\\xi)=1-\\xi^2\\tag{2.75}\n$$\n$$\nN_3(\\xi)=\\frac{1}{2}\\xi(\\xi+1)\\tag{2.76}\n$$\n在区间$x_{2i-1}\\le x\\le x_{2i+1}的单元$e_i$映射到区间$-1\\le\\xi\\le 1$的转化式为\n$$\nx=N_1(\\xi)x_{2i-1}+N_2(\\xi)x_{2i}+N_3(\\xi)x_{2i+1}\\tag{2.77}\n$$\n注意，当 $x_{2i} =(x_{2i-1} + x_{2i+1})/2$ 时，这个表达式简化为方程(2.64)。这种表示法比2.2中的表示法更具一般性，因为它允许内部节点位于元素中点以外的位置。\n从$N_i(x)$ 对$x$的导数可以通过以下方式获得：\n$$\n\\frac{dN_i}{d\\xi}=\\frac{dN_i}{dx}\\frac{dx}{d\\xi}\n$$\n$$\n\\frac{dN_i}{dx}=\\frac{1}{dx/d\\xi}\\frac{dN_i}{d\\xi}\\tag{2.78}\n$$\n于是有\n$$\n\\frac{dx}{d\\xi}=\\frac{dN_1}{d\\xi}x_{2i-1}+\\frac{dN_2}{d\\xi}x_{2i}+\\frac{dN_3}{d\\xi}x_{2i+1}\\tag{2.79}\n$$\n在（2.79）中使用了元素坐标的全局值$x^{(e_i)}_1$，$x^{(e_i)}_2$，$x^{(e_i)}_3$。$dx/d\\xi$为坐标变换的***雅可比行列式***，通常表示为$\\boldsymbol{J}$。\n\n## 2.6 随时间变化的扩散方程\n我们现在将有限元算法扩展到非稳态热扩散方程。假设 $Q = 0$，即没有源或汇。热传导的控制方程通常写为：\n\n$$\n\\frac{\\partial T}{\\partial t}-\\alpha\\frac{\\partial^2T}{\\partial x^2}=0\\tag{2.90}\n$$\n\n其中$\\partial T/\\partial t$表示温度随时间的变化率，$\\alpha = k/(\\rho c_p)$ 是热扩散率，$\\rho$ 是密度，$c_p$ 是材料的比热容。\n<br>现在$T = T(x,t)$是关于空间（$x$）和时间（$t$）的函数。因此，除了边界条件外，我们还需要指定一个初始条件，也就是说，我们必须满足边界条件以及方程（2.90）：\n$$\n-K\\frac{\\partial T}{\\partial x}+h(T-T_\\infty)\\Bigg|_{0,t}=0\\tag{2.91}\n$$\n$$\nT(L,t)=T_L\\tag{2.92}\n$$\n初始条件为\n$$\nT(x,0)=T_0(X)\\tag{2.93}\n$$\n方程（2.91）和（2.92）也假设了广义记号 $T_L(t) = T(t)$ 和 $T_{\\infty}(t) = T(t)$；$T_0(t)$ 是杆在时间$t = 0$时的温度分布。\n在恒温假设下$T_L$ 和$T_{\\infty}$，方程（2.90）及其相关的边界条件和初始条件的解析解可以轻松获得。\n\n### 2.6.1 空间离散\n方程（2.90）的权重残差形式为\n$$\n\\int W(x)\\Bigg[\\frac{\\partial T}{\\partial t}-\\alpha\\frac{\\partial^2T}{\\partial x^2}\\Bigg]dx=0\\tag{2.94}\n$$\n需要注意的是，权重函数仅是关于$x$的函数，即严格与空间离散化相关。此外，我们将假设温度可以写成分离变量的形式，并在空间上使用与之前相同的形状函数进行近似，即：\n$$\nT(x,t)=\\sum^{n+1}_{i=1}N_i(x)T_i(t)\\tag{2.95}\n$$\n式中$n$为网格节点数。\n时间依赖性不影响形状函数，并保持在依赖变量中。温度的时间导数由以下公式给出：\n$$\\frac{\\partial T}{\\partial x}=\\sum^{n+1}_{i=1}\\frac{\\partial N_i}{\\partial x}T_i\\equiv\\Bigg[\\frac{\\partial N_i}{\\partial x}\\Bigg][T_i]\\tag{2.96}$$\n这与之前相同。我们将使用偏导数符号来表示形状函数和离散变量的导数，即使这些函数只依赖于一个独立变量，且这些导数是总导数。我们还有：\n$$\n\\frac{\\partial T}{\\partial t}=\\sum^{n+1}_{i=1}N_i\\frac{\\partial T}{\\partial t}\\equiv\\sum^{n+1}_{i=1}N_i\\dot{T}_i\\equiv[N_i][\\dot{T}_i]\\tag{2.97}\n$$\n其中$\\dot{T}_i$表示对时间的导数，$[N]$和$[T]$分别为行矩阵和列矩阵。\n方程（2.94）的伽辽金形式为\n$$\n\\int^L_0\\Bigg\\{N_i\\Bigg(\\sum^{n+1}_{j=1}N_j\\dot{T}_j\\Bigg)+\\alpha\\frac{\\partial N_i}{\\partial x}\\Bigg(\\sum^{n+1}_{j=1}\\frac{\\partial N_j}{\\partial x}T_j\\Bigg)\\Bigg\\}dx+\\Bigg[N_i\\Bigg(-\\alpha\\frac{\\partial T}{\\partial x}\\Bigg)\\Bigg]^{x=L}_{x=0}=0\\tag{2.98}$$\n在这个阶段，我们将引入标记符号来替换表达式中的求和符号:\n$$\n\\sum^{n+1}_{i=1}a_ib_i\\equiv a_ib_i\\tag{2.99}$$\n于是方程（2.98）使用上述标记写为更简便的形式：\n$$\n\\Bigg[\\int^L_0N_iN_jdx\\Bigg]\\dot{T}_j+\\Bigg[\\alpha\\int^L_0\\frac{\\partial N_i}{\\partial x}\\frac{\\partial N_j}{\\partial x}dx\\Bigg]T_j+\\Bigg[N_i\\Bigg(-\\alpha\\frac{\\partial T}{\\partial x}\\Bigg)\\Bigg]^{x=L}_{x=0}=0\\tag{2.100}\n$$\n其中第一个积分中的时间项重写为\n$$\n\\int^L_0N_i\\frac{\\partial T}{\\partial t}dx=\\Bigg(\\int^L_0N_iN_jdx\\Bigg)\\dot{T}_j\n$$\n方程中$\\dot{T}_j$一般称作质量矩阵，这是由于$N_iN_j$表示包含节点$i$并与所有连接节点$j$相关联的单元的面积。方程（2.100）给出的形式被称为半离散伽辽金形式，因为只对空间变量进行了离散化，关于时间导数项还没有任何说明。\n### 2.6.2 时间离散化\n在有限元方法中，有多种处理方程（2.100）的时间积分的方式。在这里，我们将介绍所谓的$\\theta$-方法，它导致最常用的时间积分算法。在$\\theta$-方法中，时间导数被简单差分所代替：\n$$\n\\frac{\\partial T}{\\partial t}=\\frac{T^{n+1}-T^n}{\\Delta t}\\tag{2.102}\n$$\n式中$T^n=T(x,t_n)$表示时间$t=t_n$时的变量值，$\\Delta t$为时间增量，$t_{n+1}=t_n+\\Delta t$。一般地，我们假设$T(x,t_n)$已知，并用作初始条件，用于推进解到时间水平$t_{n+1}$。我们现在引入一个弛豫参数$q$，并将解$T$写成以下形式：\n$$\nT=\\theta T^{n+1}+(1-\\theta)T^{n},t_n\\le t\\le t_{n+1}\\tag{2.102}\n$$\n参数$\\theta$通常指定在$0\\le\\theta\\le 1$的范围内，用于控制算法的准确性和稳定性。最常用的$\\theta$值是$0$、$1/2$和$1$。众所周知，当$\\theta<1/2$时，仅达到条件稳定性。\n$\\theta=1$为向后隐式方法，\n$\\theta=1/2$给出一个第二阶中心隐式方法，\n$\\theta=0$给出显式欧拉前向方案。\n将方程（2.101）和（2.102）代入方程（2.100），我们得到：\n$$\n\\Bigg(\\int^L_0N_iN_jdx\\Bigg)\\Bigg(\\frac{T^{n+1}-T^n_j}{\\Delta t}\\Bigg)+\\Bigg(\\alpha\\int^L_0\\frac{\\partial N_i}{\\partial x}\\frac{\\partial N_j}{\\partial x}dx\\Bigg)(\\theta T^{n+1}_j+(1-\\theta)T^n_j)\\\\\n+\\Bigg[N_i\\Bigg(-\\alpha\\Bigg\\{\\theta\\frac{\\partial T^{n+1}}{\\partial x}+(1-\\theta)\\frac{\\partial T^n}{\\partial x}\\Bigg\\}\\Bigg)\\Bigg]^{x=L}_{x=0}=0\n$$\n可重写为\n$$\n\\Bigg[\\int^L_0N_iN_jdx+\\alpha\\Delta t\\theta\\int^L_0\\frac{\\partial N_i}{\\partial x}\\frac{\\partial N_j}{\\partial x}dx\\Bigg]T^{n+1}_j+\\theta\\Delta t\\Bigg[N_i\\Bigg(-\\alpha\\frac{\\partial T^n}{\\partial x}\\Bigg)\\Bigg]^{x=L}_{x=0}\\\\\n=\\Bigg[\\int^L_0N_iN_jdx+\\alpha\\Delta t(\\theta-1)\\int^L_0\\frac{\\partial N_i}{\\partial x}\\frac{\\partial N_j}{\\partial x}dx\\Bigg]T^n_j+(\\theta-1)\\Delta t\\Bigg[N_i\\Bigg(-\\alpha\\frac{\\partial T^n}{\\partial x}\\Bigg)\\Bigg]^{x=L}_{x=0}\\\\\n\\tag{2.103}\n$$\n在这个表达式中，可以看到当$\\theta=0$时。等式左侧只有质量矩阵项。这个项导致相邻元素之间的“连接度”比传统有限差分方法中的更高。\n\n## 2.7 矩阵公式化\n有限元方法基于在特定节点位置对因变量的数值近似；产生一组必须直接或迭代求解的同时线性代数方程。对于之前讨论的示例问题，未知数的数量，因此方程的数量很少，可以通过手工推导的方式轻松解决。然而，对于大多数问题，节点的数量，由此产生的未知数的数量，将会大大增加，需要计算机来执行求解运算。\n<br>我们之前使用的系数矩阵是在每个单元上分析得到，并组装成全局数组。换句话说，从每个单元获得的局部系数矩阵被“塞进”一个大矩阵中，该矩阵包含所有局部单元的贡献。这个过程可以通过计算机程序中的“do循环”轻松执行。一旦我们为一个单元制定了有限元算法，该方法的通用性允许我们对所有单元使用相同的程序。因此，我们可以构建基于局部单元矩阵评估的全局矩阵，然后以我们希望的方式求解矩阵方程。\n<br>定义矩阵符号运算会很方便。时间导数项的局部质量矩阵为\n$$M^{(e_k)}=[m^{e_k}_{ij}]=\\int_{0}^{h^{(e_k)}}\n[\n    \\begin{matrix}\n     N_i^{(e_k)}&N_j^{(e_k)}]\n\\end{matrix}dx\\tag{2.108}\n    \n$$\n其中 $h$ 是单元的长度，$N_i^{(e_k)}$ 和 $N_j^{(e_k)}$ 是单元的形状函数。\n\n全局矩阵 $\\boldsymbol{M}$ 表示为\n$$ \\boldsymbol{M}=[m_{ij}] = \\sum_{k=1}^{n} M^{(e_k)}=\\sum^n_{k=1}\\int_{0}^{h^{(e_k)}}\n[\n    \\begin{matrix}\n     N_i^{(e_k)}&N_j^{(e_k)}]\n\\end{matrix}dx\\tag{2.109} $$\n其中$n$是单元的数量。求和意味着每个元素矩阵是一个$(n+1)\\times (n+1)$ 矩阵，通过在不包含单元中节点的所有位置填充零来从单元矩阵扩展而来。\n<br>例如，考虑使用三个等长的线性元素离散区间$0 \\leq x \\leq 1$。使用方程（2.108）评估局部质量矩阵得到\n$$\\boldsymbol{M}^{(e_1)}=\\boldsymbol{M}^{(e_2)}=\\boldsymbol{M}^{(e_3)}=\\frac{1}{18} \\Bigg[\\begin{matrix}\n2&1\\\\\n1&2\n\\end{matrix}\\Bigg]$$\n\n组装后的矩阵 $\\boldsymbol{M}$为\n$$ M = \\begin{bmatrix} \n1/9 & 1/18 & 0 & 0\\\\ \n1/18 & 1/9 & 0 & 0  \\\\ \n0 & 0 & 0 & 0  \\\\ \n0 & 0 & 0 & 0  \\\\ \n\\end{bmatrix}+\\begin{bmatrix} \n0 & 0 & 0 & 0\\\\ \n0 & 1/9 & 1/18 & 0  \\\\ \n0 & 1/18 & 1/9 & 0  \\\\ \n0 & 0 & 0 & 0  \\\\ \n\\end{bmatrix}\\\\\n+\\begin{bmatrix} \n0 & 0 & 0 & 0\\\\ \n0 & 0 & 0 & 0  \\\\ \n0 & 0 & 1/9 & 1/18  \\\\ \n0 & 0 & 1/18 & 1/9  \\\\ \n\\end{bmatrix}\n=\\begin{bmatrix} \n1/9 & 1/18 & 0 & 0\\\\ \n1/18 & 2/9 & 1/18 & 0  \\\\ \n0 & 1/18 & 2/9 & 1/18  \\\\ \n0 & 0 & 1/18 & 1/9  \\\\ \n\\end{bmatrix}$$\n\n由于矩阵$\\boldsymbol{M}$ 中许多条目是零，因此它被称为***稀疏矩阵***。实际上，除非节点编号方式非常人为，否则所有从有限元离散化中产生的全局矩阵都是稀疏的。在一维线性和二次单元的特殊情况中，如果节点按顺序编号，矩阵将分别为三对角线和五对角线矩阵。\n<br>类似地，扩散项表示为\n$$\\boldsymbol{K}=\\sum^n_{k=1}\\boldsymbol{K}^{(e_k)}= \\sum_{k=1}^{n} \\int_{0}^{h^{(e_k)}}K^{(e_k)} \\Bigg[\\frac{dN_i^{(e_k)}}{dx} \\frac{dN_j^{(e_k)}}{dx}\\Bigg]dx\\tag{2.110} $$\n通常将矩阵$\\boldsymbol{K}$ 称为“刚度”或“传导”矩阵。\n整体上包含包括如源项的已知函数的贡献被定义为列向量，长度等于节点数，我们将其表示为\n$$ \\boldsymbol{F}=\\sum^n_{k=1}F^{(e_k)}=\\sum_{k=1}^{n}\\int_{0}^{h^{(e_k)}}[N_i^{(e_k)}]^TQ^{(e_k)}dx\\tag{2.111} $$\n其中$Q^{(e_k)}$表示$Q$在单元$e_k$上的限制，\n$[N_i^{(e_k)}]^T$是一个列矩阵\n如果依赖变量出现，则从热通量边界条件的贡献被添加到刚度矩阵 (2.110)，或者如果只涉及已知数据，则添加到向量$\\boldsymbol{F}$。通常将向量$\\boldsymbol{F}$称为载荷向量。然后，时间依赖的传导方程可以表示为\n$$\\boldsymbol{M\\dot{T}}+\\boldsymbol{KT}=\\boldsymbol{F}\\tag{2.112}$$\n其中 $\\boldsymbol{T}$是节点未知数的向量，$\\boldsymbol{\\dot{T}}$是关于时间导数的向量。\n<br>使用方程(2.101)和(2.102)替换方程(2.112)中的时间导数$\\boldsymbol{\\dot{T}}$，得到完全离散化的线性代数方程组为\n$$(\\boldsymbol{M}+\\theta\\Delta t\\boldsymbol{K})\\boldsymbol{T}^{n+1}=(\\boldsymbol{M}+(\\theta-1)\\Delta t\\boldsymbol{K})\\boldsymbol{T}^n+\\Delta t(\\theta\\boldsymbol{F}^{n+1}+(1-\\theta)\\boldsymbol{F}^n)\\tag{2.113}$$\n方程（2.113）为使用$\\theta$-方法求解含时间参量的传导方程算法。这种表示的优点是，现在我们可以使用矩阵理论以符号方式处理方程（2.113）。例如，如果 $(\\boldsymbol{M}+\\theta\\Delta t\\boldsymbol{K})$ 是一个可逆的非奇异矩阵，解$\\boldsymbol{T}^{n+1}$由下式给出：\n$$ \\boldsymbol{T}^{n+1}=(\\boldsymbol{M}+\\theta\\Delta t\\boldsymbol{K})^{-1}[(\\boldsymbol{M}+(\\theta-1)\\Delta t\\boldsymbol{K})+\\Delta t(\\theta\\boldsymbol{F}^{n+1}+(1-\\theta)\\boldsymbol{F}^n)]\\tag{3.115}$$\n在我们继续本书的其余部分时，我们将使用矩阵符号来简化我们的代数表达式。然而，我们也将说明构成计算机程序基础的矩阵的局部单元评估。\n\n## 2.8 求解方法\n在所有前面的部分中，将有限元方法应用于控制方程导致一组线性方程，包括与原始微分方程的各种项相关的矩阵，如方程（2.113）。我们可以进一步将这个方程表示为\n$$A\\phi=\\boldsymbol{B}\\tag{2.115}$$\n其中\n$$A =\\boldsymbol{M}+\\theta\\Delta t\\boldsymbol{K}\\tag{2.116}$$\n$$\\phi=\\boldsymbol{T}^{n+1}\\tag{2.117}$$\n$$\\boldsymbol{B}=(\\boldsymbol{M}+(\\theta-1)\\Delta t\\boldsymbol{K})\\boldsymbol{T}^n+\\Delta t(\\theta\\boldsymbol{F}^{n+1}+(1-\\theta)\\boldsymbol{F}^n)\\tag{2.118}$$\n所有出现在$\\boldsymbol{A}$和$\\boldsymbol{B}$中的项都是已知的，所以我们可以很容易地求解方程（2.115）中的未知数$\\phi$。然而，如前所述，求解大型方程组可能会变得非常耗时和昂贵，即使是使用大型计算机，更不用说使用个人计算机了。这种情况引入了解决大型线性方程组的特殊方法的需要，如方程（2.115）。处理这些方法的数学学科称为数值线性代数，具有一些背景的读者将通过高斯消元法、雅可比和高斯-塞德尔迭代、LU分解、逐步超松弛、共轭梯度等方法的名字来识别这些方法。数值线性代数中矩阵求解技术的发展成为了一个领域；我们的目的只是让读者熟悉基本思想，以便理解它们如何实现到计算机程序中。方程（2.115）的解是通过在方程两端乘以\n$\\boldsymbol{A}^{-1}$（注意$\\boldsymbol{A}^{-1}\\boldsymbol{A}\\equiv\\boldsymbol{I}$，$\\boldsymbol{I}$为单位矩阵）。因此，\n$$\\phi=\\boldsymbol{A}^{-1}\\boldsymbol{B}\\tag{2.119}$$\n如果$\\boldsymbol{A}$很大，这很难执行。幸运的是，存在有效的数值方法，允许我们在不需要找到$\\boldsymbol{A}^{-1}$的情况下得到$\\phi$。矩阵代数，包括找到矩阵的逆，在附录A中有更详细的讨论。解决线性代数方程组系统基本上有两种方法。解决方程（2.119）形式的一些最简单和最有效的方案是迭代方法。迭代方法是一个近似方法，即它使用初始猜测来开始求解过程，然后迭代以获得解的估计值。方程（2.119）包括$n$个方程，无论是线性还是非线性，都有$n$个未知数$\\phi$。矩阵$\\boldsymbol{A}$包含$n\\times n$个系数（尽管在实践中许多的系数都是零）。如果我们假设对角线系数$a_{ii}(i = 1,\\cdots,n)$不为零（这在有限元方法中是有效的），则可以相对容易地重新排列方程，从而得到一种求解未知值$\\phi$的方法。考虑\n$$\\phi^{(k+1)}_1 = -\\frac{1}{a_{11}}(a_{12}\\phi^{(k)}_2+a_{13}\\phi^{(k)}_3+\\cdots+a_{1n}\\phi^{(k)}_{n+1})+\\frac{b_1}{a_{11}}\\\\\n\\phi^{(k+1)}_2 = -\\frac{1}{a_{22}}(a_{21}\\phi^{(k)}_1+a_{23}\\phi^{(k)}_3+\\cdots+a_{2n}\\phi^{(k)}_{n+1})+\\frac{b_2}{a_{22}}\\\\\n\\vdots\\\\\n\\phi^{(k+1)}_{n+1} = -\\frac{1}{a_{nn}}(a_{n1}\\phi^{(k)}_1+a_{n2}\\phi^{(k)}_2+\\cdots+a_{n,n-1}\\phi^{(k)}_{n})+\\frac{b_n}{a_{nn}}\\tag{2.120}\n$$\n其中$k$表示迭代索引。\n<br>要求解方程（2.113），我们先做一个初始猜测，$\\phi^{(0)}$，然后将猜测值（例如，$\\phi^{(0)}_i=0$）代入方程（2.120）的右侧。这产生了一个新的$\\phi$d的估计值 $\\phi^{(1)}$，希望它比之前的估计值$\\phi^{(0)}$更好。我们继续这个过程，获得$\\phi^{(2)},\\phi^{(3)},\\cdots,\\phi^{(k)}$，直到解收敛。通常通过计算$(k)$次迭代的相对或绝对误差来确定收敛性，即\n$$ \\max\\frac{|\\phi^{(k+1)}_i-\\phi^{(k)}_i|}{|\\phi^{(k+1)}_i|}<\\epsilon\\tag{2.121}$$\n或\n$$ \\max |\\phi^{(k+1)}_i-\\phi^{(k)}_i|<\\epsilon\\tag{2.122}$$\n这种类型的迭代被称为***线性迭代***。虽然简单，但该方法可能需要很多次迭代才能在大型问题中实现收敛。为了在小计算机上实现有效的解决方案，需要加速收敛。\n<br>矩阵$\\boldsymbol{A}$还必须满足某些条件才能保证收敛。然而，这不是本文讨论这些条件的范围，除了它们最简单的形式。除了一些评论，我们将满足于声明对于这里考虑的有限元离散化类型，这些条件确实得到满足，并且通常会发生收敛。\n<br>高斯-塞德尔迭代方法特别适合解决大型方程组。该方法简单易实现，计算效率高，并且比直接消元方法更不容易受到舍入误差的影响（由迭代次数决定）。然而，必须对这类方案提出警告——存在高斯-塞德尔方法不收敛的情况。这些情况通常发生在矩阵病态时。\n<br>由于矩阵求逆计算缓慢且可能需要过多的存储空间，使用矩阵乘法和标量分流来获得方程（2.1119）的解。尽管在迭代方法中有些多余，但这样的操作非常快速。高斯-塞德尔迭代算法可以表示为\n$$ \\phi_i^{(k+1)} = \\frac{1}{a_{ii}} \\left( b_i - \\sum_{j=1}^{i-1} a_{ij} \\phi_j^{(k+1)} - \\sum_{j=i+1}^{n} a_{ij} \\phi_j^{(k)} \\right) $$\n注意，最更新的 $\\phi_i^{(k+1)}$ 用于迭代过程中，这使得方案更快、更有效。一个收敛的条件要求矩阵是**对角占优**的，即\n$$|a_{ii}| > \\sum_{j=1,j\\neq i}^{n} |a_{ij}|,i=1,2,\\cdots,n\\tag{2.124}$$\n其中严格不等式必须至少对一个方程成立。如果这个条件是满足的，无论初始向量的值如何，解都将收敛（这就是为什么许多人使用零作为初始估计的原因）。我们可以将方程（2.123） 用上三角和下三角矩阵表示为，\n\n$$(\\boldsymbol{L}+\\boldsymbol{D})\\phi=-\\boldsymbol{U}\\phi+b\\tag{2.125}$$\n其中$\\boldsymbol{L}$，$\\boldsymbol{D}$，和$\\boldsymbol{U}$是定义如下的方阵：\n$$\\boldsymbol{L}=[\\ell_{ij}]=\n    \\begin{cases}\n     a_ij,i>j\\\\\n     0,i\\le j\n    \\end{cases}\\tag{2.126}\n$$\n为下三角矩阵；\n$$\\boldsymbol{D}=[d_{ij}]=\n    \\begin{cases}\n     a_ij,i=j\\\\\n     0,i\\neq j\n    \\end{cases}\\tag{2.127}\n$$\n为对角矩阵\n$$\\boldsymbol{U}=[u_{ij}]=\n    \\begin{cases}\n     a_ij,i<j\\\\\n     0,i\\ge j\n    \\end{cases}\\tag{2.126}\n$$\n为上三角矩阵。于是方程（2.123）的矩阵形式为\n$$ \\phi^{(k+1)}=-\\boldsymbol{D}^{-1}\\boldsymbol{L}\\phi^{(k+1)}-\\boldsymbol{D}^{-1}\\boldsymbol{U}\\phi^{(k)}+\\boldsymbol{D}^{-1}\\boldsymbol{b}\\tag{2.129} $$\n或者，乘以$\\boldsymbol{D}$并求解$\\phi^{(k+1)}$，\n$$ \\phi^{(k+1)}=(\\boldsymbol{D}+\\boldsymbol{L})^{-1}(\\boldsymbol{b}-\\boldsymbol{U}\\phi^{(k)})\\tag{2.130} $$\n迭代收敛到解的速度取决于方程（2.124）中对角项的大小。更强烈的对角占优矩阵将产生更快的收敛。显然，当初始（猜测）值接近真实解时，只需要几次迭代。超松弛（SOR）是高斯-塞德尔方法的一个流行变体，在其中使用加速参数或松弛因子来加速收敛（Chapra 和 Canale, 2015; Conte, 1965）。算法的实际实现通过计算机代码相当容易。形成上三角和下三角矩阵可以通过简单的“do loop”指令方便地处理。在剑桥大学出版社出版的“Numerical Recipes”系列书籍中可以找到使用这些过程的 FORTRAN，C/C++，和 JAVA 的源代码列表。在 Kattan (2007) 中可以找到 MATLAB 示例（称为“for loops”）；这些同样在 Portela 和 Charaf (2002) 和 Aziz (2006) 中讨论了 MAPLE 程序。当网格结构使得矩阵的带状特性不被改变时（例如，在一维问题中，或在定义在矩形或平行六面体域上的二维和三维问题中），迭代方法具有优势，并且只需要几个解，如线性稳态问题的情况。如果计算网格是不规则的，或者如果必须一遍又一遍地解决相同的线性方程组（如在线性时间依赖问题或在优化问题中，同一系统必须为许多不同的右手边解），迭代方法就变得不那么有吸引力了。迭代方法的主要优势在于只需要在内存中存储矩阵的非零元素。与直接消元过程相比，这可能意味着巨大的存储节省。缺点是每次方程（2.115）中的$\\boldsymbol{B}$ 改变时，都必须重复算法过程。\n<br>解决线性代数方程组的第二种方法包括直接求解系统；这些方法基于高斯消除。将系数矩阵$\\boldsymbol{A}$分解为一个下三角矩阵和一个上三角矩阵的乘积，称为***LU***分解，是迭代方法的有吸引力的替代方法。可以利用系数矩阵$\\boldsymbol{A}$的稀疏性质来编写耗时的消除步骤。使用$LU$分解的消除程序是直接求解方程组的最流行技术（Atkinson, 1985; Chapra和Canale, 2015）。$LU$分解方法是高斯消除的一个变体；通过“分解”$\\boldsymbol{A}$矩阵为$\\boldsymbol{L}$和$\\boldsymbol{U}$矩阵的乘积，可以得到比原始消除更有效的算法。让我们将方程（2.115）重写为\n$$\\boldsymbol{A}\\phi-\\boldsymbol{B}=0\\tag{2.131}$$\n我们可以将方程（2.131）表示为上三角系统的形式，即\n$$\\boldsymbol{U}\\phi-\\boldsymbol{D}=0\\tag{2.132}$$\n如果我们现在用下三角矩阵$\\boldsymbol{L}$预乘方程(2.132)，并要求得到的系统等于由方程(2.131)给出的原始方程组，我们有\n$$\\boldsymbol{L}(\\boldsymbol{U}\\phi-\\boldsymbol{D})=\\boldsymbol{A}\\phi-\\boldsymbol{B}\\tag{2.133}$$\n方程（2.133）有效的条件是\n$$\\boldsymbol{LU}=\\boldsymbol{A}\\tag{2.134}$$\n和\n$$\\boldsymbol{LD}=\\boldsymbol{B}\\tag{2.135}$$\n方程（2.134）被称为$\\boldsymbol{A}$的LU分解。这种类型的分解可以对任何非奇异矩阵$\\boldsymbol{A}$进行；然而，执行它没有唯一的方法。在文献中可以找到获得这种分解的不同方法。例如，如果将矩阵$\\boldsymbol{L}$的所有对角元素都设置为1，则会得到一个唯一的分解，这被称为Doolittle约简。如果矩阵$\\boldsymbol{A}$是对称的，可以以这样的方式进行分解\n$$\\boldsymbol{L}=\\boldsymbol{U}^T\\tag{2.136}$$\n这被称为Cholesky方法或平方根方法，因为需要平方根操作来获得对角元素$u_{ii}$（这将在稍后更详细地讨论）。\n<br>方程（2.135）被称为前向替代，并产生向量$\\boldsymbol{D}$。为了获得解向量$\\phi$，还需要一个步骤。一旦得到$\\boldsymbol{D}$，这可以通过求解方程（2.132）来提供，涉及与直接高斯消除中所需的相同类型的后向替代。大多数数值方法教科书都提供了使用这些过程的算法和子程序列表（见Atkinson, 1985; Chapra和Canale, 2015; Conte, 1965; Isaacson和Keller, 1966）。\n<br>带状矩阵是一个方阵，除了主对角线中心的一条带外，所有系数都等于零。这样的系统经常出现在微分方程的求解中，特别是在工程和科学问题中。在有限元中，这样的矩阵出现在线性结构和扩散相关问题中。当方程是非线性的，如在流体流动中，可能会出现非对称带状矩阵。在这本入门书中，我们只关心线性对称带状系统方程；然而，与FORTRAN软件一起提供的矩阵求解器将处理对称或非对称带状矩阵。像高斯消除或LU分解这样的直接方法在求解问题的几何形状不规则且方法产生带状结构较差的矩阵时，比迭代方法具有更大的优势。当同一个系统必须为许多不同的右手边求解时，它们也更方便，因为只需要进行一次分解。通过可以非常高效地执行的简单前向和后向替代来获得解。对于单个解的强带状系统方程，这样的方法通常效率较低，并且在存储和操作零值时引入了不必要的计算工作。\n<br>对于具有半带宽或半带宽$\\ell$的对称矩阵，如图9所示，只需要在任何时候在核心中存储顺序为$\\ell$的上三角部分。总的存储需求是$\\ell[n-(\\ell - 1)/2]$。\n<br><center>![图9 带状$n \\times n$矩阵$\\boldsymbol{A}$，半带宽$\\ell$和带宽$2\\ell - 1$，指示$\\boldsymbol{A}$中存储需求的对称](9.png)</center>\n\n矩阵的带状特性以及因此的$\\ell$的大小，直接取决于节点编号的方式。带宽由所有元素中节点编号的最大差异决定。当我们进一步研究2-D和3-D元素时，这一事实将变得非常重要，并指出了“优化”节点编号的必要性。对于1-D元素，如果节点编号是顺序的，对于线性元素，得到的全局矩阵是三对角的，对于二次单元，是五对角的。然而，读者应该注意，如果节点编号不是顺序的，情况将不是如此。解决对称方程组的最有效和最受欢迎的方法之一是前面提到的Cholesky分解。该算法依赖于这样一个事实：对称矩阵可以分解为彼此转置的上三角和下三角矩阵，即\n$$\\boldsymbol{A}=\\boldsymbol{U}^T\\boldsymbol{U}\\tag{2.137}$$\n其中上标$T$表示转置（见附录A）。方程(2.137)可以写成递归形式为\n$$l_{ii} = \\sqrt{q_{ii} - \\sum_{k=1}^{i-1} l_{ik}^2}, \\quad i = 1, 2, \\ldots, n \\tag{2.138}$$\n和\n$$l_{ij} = \\frac{1}{u_{jj}} (a_{ij} - \\sum_{k=1}^{j-1} l_{ik} u_{jk}), j < i \\tag{2.139}$$\n前提是矩阵A是正定的。这个过程显著加快了LU分解步骤。然后可以执行前向和后向替代以得到解向量。在这种方法中，不需要进行枢轴操作以避免除以零。矩阵A的正定性保证了对于所有$i$值，$u_{ii} > 0$。\n## 2.9 小结\n本章的目的是阐述并确立将有限元方法应用于线性偏微分方程。从标量量的简单稳态扩散方程开始，有限元方法被应用于越来越复杂的方程，最终导致在工程和科学问题中常见的1-D时变扩散传输方程。在几个示例问题中推导和使用各种程度的形函数后，可以看到一个通用的有限元过程的演变，该过程可以应用于广泛的范围问题。在整个元素集或网格上的组装过程被展示出来，产生了一组全局矩阵。将全局矩阵系统简化为形式为$\\boldsymbol{A}\\phi =\\boldsymbol{B}$的简单线性（矩阵）方程，其中$\\phi$是包含未知变量的列向量，允许使用标准矩阵求解程序来求解$\\phi$。\n<br>大多数与有限元方法相关的基本“工具”可以从1-D问题的分析中发展出来。有限元方法的基本要素可以总结如下：\n\n1. 将加权残差法应用于控制方程和相关的边界条件。\n2. 选择合适的形函数和加权因子（线性、二次、三次等）。\n3. 对x轴进行离散化，并评估一般有限元域的Galerkin近似。\n4. 将元素贡献组装成一组全局矩阵。\n5. 将必要的边界条件数据（由已知值组成）应用于载荷向量。\n6. 使用合适的矩阵求解程序，从初始条件数据$\\phi_{t_0} = \\phi_0$开始，求解未知值的列向量$\\phi$，并通过时间$t^{n+1} = t^n + \\Delta t$进行迭代，直至收敛到稳态条件。\n\n在本文的这一点上，读者应该开始对有限元的数学基础有所了解，这些基础来自于这些简单的1-D示例。对于那些对有限元方法不太熟悉的人，我们建议在继续阅读剩余章节中的更高级材料之前，再次回顾一下最后这几节内容。在下一章中，我们将算法扩展到2-D问题。\n","categories":["FEM"]},{"title":"03-有限元理论推导（一）","url":"/2024/08/31/有限元理论推导（一）/","content":"\n# 1 加权残差法和伽辽金近似\n## 1.1 经典问题引入\n考虑确定一根长度为$L$、横截面恒定的细长均质金属丝的热传导情况。假定左端暴露在规定的热通量$q$下，右端保持恒温$T=T_L$，并且棒的长度方向被绝缘材料包围。利用傅立叶定律，我们可以写出控制整个棒的温度分布的导线方程，即：\n$$-K\\frac{d^2T}{dx^2}=Q，0<x<L\\tag{1.1}$$\n式中\n    <br>$x$为长度坐标\n    <br>$K$是材料的热传导率（假定为常数）\n    <br>$Q$是单位体积产生的热量\n与这一问题相应的边界条件是\n$$-K\\frac{dT}{dx}=q，x=0\\tag{1.2}$$\n$$T=T_L，x=L\\tag{1.3}$$\n当$q>0$时，热量流向$x=0$处的棒体，这就是公式(1.2)中负号的原因。\n\n假定$Q$是可积的，那么方程(1.1)的解与边界条件(1.2)和(1.3)可以通过直接积分求得：\n$$T(x)=T_L+\\frac{q}{K}(L-x)+\\frac{1}{K}\\int^L_x(\\int^x_0Q(z)dz)dy\\tag{1.4}$$\n如果Q为常数，公式(2.4)简化为：\n$$T(x)=T_L+\\frac{q}{K}(L-x)+\\frac{Q}{2K}(L^2-x^2)\\tag{1.5}$$\n\n## 1.2 弱形式描述\n通常有两种方法可以用有限元来计算和求解方程(1.1)的形式,这两种方法分别称为***Rayleigh-Ritz法***和***Galerkin法***。其他较少使用的方法是基于配位、常数加权和最小平方技术。所有这些程序都是加权残差法的子集。\n<br>无论我们使用哪种方法，第一步都是在$0\\le x \\le L$的区间内划分出网格，网格由一定数量的非重叠子区间组成，覆盖整个域，每个子区间称为一个 \"单元\"。我们用$e_k$表示每个单元，即$e_k=\\{x:x_k\\le x\\le x_{k+1}\\}$。每个子区间的端点$x_k$称为节点。\n温度分布由每个子区间的预设函数（用$\\phi_j(x)$表示）和相应的未知参数$a_j$计算得到。\n<br>因此，我们将一个单元定义为一个子区间$e_k$，以及一组预先确定的函数$\\varphi_j$和相同数量的参数$a_j$。这样如果参数$a_j$已知，则温度长边的近似值$T(x)$也是已知的。在整个域$0 \\le x \\le L$上，我们可以写出\n$$T(x)\\cong a_1\\phi_1(x)+a_2\\phi_2(x)+\\cdots+a_{n+1}\\phi_{n+1}(x)\\tag{1.6}\n$$\n函数$\\phi(x)$称作形状函数，我们将式（1.6）写成求和的形式，即\n$$T(x)=\\sum^{n+1}_{i=1}a_i\\phi_i(x)\\tag{1.7}\n$$\n当使用 (1.7) 形式的表达式近似求解问题时,一般来说，我们无法得到这个偏微分方程的真实解。因此，如果我们将近似解替换为方程（1.1）的左侧，我们得到的将不是同一值，而是与误差相关的某个 \"残差 \"函数。我们将这个残余误差定义为\n$$R(T,x)\\equiv-K\\frac{d^2T}{dx^2}-Q\\tag{1.8}$$\n这里，$T$是真实解$T^*$的近似解，即$R(T^*,x)\\equiv 0$。然而，对任意的$T\\neq T^*$，我们不能令残差在每个$x$点都消失。加权残差法的原理是，我们可以将残差乘以加权函数，令加权残差的积分在每一点$x$上变为0，即\n$$\\int^L_0W(x)R(T,x)dx=0\\tag{1.9}$$\n式中$W(x)$为权重函数。通过选择不同的权重函数并将其替换到弱形式（1.9）中，我们可以生成一个关于未知参数$a_j$线性方程组，该方程组用于确定偏微分方程近似解$T$的形式，该近似解类似于方程（1.7）给出的有限级数。这种方法满足偏微分方程的“平均”或“积分”意义上的解。所选加权函数的类型取决于所选加权残差函数的类型。在Galerkin方法中，权重与形状函数$\\phi(x)$相等，即$W_i(x)=\\phi_i(x)$。\n<br>由于未知参数$a_j$的数量等于形状函数$\\phi_j$的数量，将生成一个方程数量与未知数数量相同的线性代数方程组。如果与偏微分方程相关的边界条件被正确设定和施加，那么这样的方程组的存在性和唯一性是保证的。这种方法在处理高维不规则几何和非线性问题中特别有优势，并且会自动生成一个方程数量与未知数数量相同的方程组。形状函数$\\phi(x)$的定义是有限元方法的关键所在。我们将几乎完全局限于使用简单（线性、二次和三次）插值；可以使用更高阶（和超越）近似，但这会带来额外的复杂性、计算时间和存储要求。使用基本线性、二次函数将证实有限元概念既优雅又极其强大。\n<br>我们现在希望使用我们提出的形状函数$\\phi(x)$作为权重函数$W(x)$来评估方程（1.9）的左端积分。因此，根据伽辽金方法得到：\n$$\\int^L_0\\phi(x)\\Big [-K\\frac{d^2T}{dx^2}-Q\\Big ]dx=0\\tag{1.10}$$\n我们需要找到方程（1.7）中函数$\\phi(x)$的适当形式。由于温度分布必须是$x$的连续函数，最简单的方法是在每个单元上使用分段多项式插值来近似它；特别是，分段线性近似提供了最简单的连续函数近似。不幸的是，这样的函数的一阶导数在单元节点处不连续，因此，在这些地方不存在二阶导数；此外，$T$的二阶导数在每个单元内部将消失。然而，要求二阶导数在所有地方都存在是过于严格的。这将阻止我们处理许多非常有兴趣的物理情况，例如在杆中存在一个单位强度的热源。在这种情况下，方程（1.1）变为\n$$-K\\frac{d^2T}{dx^2}=\\delta(x-x_s)\\tag{1.11}$$\n式中$\\delta$为Delta函数，在$x=x_s$外的各点为0，且在这一点处的值不确定。显然，在$x=x_s$处$T$的二阶导数不存在；方程（1.11）的解为：\n$$T(x)=\n\\begin{cases}\n-\\frac{1}{K}[q(x-L)+(x_s-L)]+T_L&0\\le x\\le x_s\\\\\n-\\frac{1}{K}q(x-L)(x-L)+T_L&x_s\\le x\\le L\n\\end{cases}\\tag{1.12}\n$$\n对方程（1.10）应用分布积分，得到\n$$\\int^L_0\\phi(x)[-K\\frac{d^2 T}{dx^2}]dx=\\int^L_0K\\frac{d\\phi}{dx}\\frac{dT}{dx}dx-K\\phi\\frac{dT}{dx}\\Big |^L_0\\tag{1.13}\n$$\n于是方程（1.10）可重写为\n$$\\int^L_0K\\frac{d\\phi}{dx}\\frac{dT}{dx}dx-\\int^L_0\\phi Qdx-K\\phi\\frac{dT}{dx}\\Big |^L_0=0\\tag{1.14}\n$$\n这仅仅是一个“弱”形式的问题，因为它只包含解$T(x)$的一阶导数，而方程（1.10）包含二阶导数。对函数$T(x)$的微分要求已经减弱，因此得名“弱形式”。请注意，到目前为止还没有进行任何近似，也就是说，在表述中没有丢失任何东西，另一方面，简单的分段线性近似现在变得合理。\n### 例 1\n> 考虑方程（2.1），使用边界条件$T(0)=T_0$以及对流边界条件$-K\\frac{dT}{dx}\\Big |_{x=L}=h(T-T_\\infty)$。式中$h$为热对流传导常数，$T_\\infty$为参考温度。\n加权残差公式（式（1.9）），对于这个问题保持不变，因为它由式（1.1）推导而来，与给定的边界条件无关。每当在边界点给出温度时，我们将在该点的热流项设为零，通过要求权重函数在该点消失来实现。在这种情况下，令$\\phi(0) = 0$，并使用其他边界项中的对流边界条件，方程（1.9）的形式变为\n$$\\int^L_0K\\frac{d\\phi}{dx}\\frac{dT}{dx}-\\int^L_0\\phi Qdx+\\phi(L)h(T_L-T_\\infty)=0\\tag{1.15}$$\n>即加权残差公式。稍后，我们将进一步要求加权函数在边界点处等于1。在这种情况下，$\\phi(L) = 1$，因此加权函数永远不会明确出现在边界项中。\n\n对每个权重函数$\\phi(x)$使用公式（1.7），可将方程（1.14）改写为\n$$\\sum^{n+1}_{j=1}K\\Big [\\int^L_0\\frac{d\\phi_i}{dx}\\frac{d\\phi_j}{dx}dx\\Big ]a_j-\\int^L_0\\phi_iQdx+\\phi_i\\Big[-K\\frac{dT}{dx}\\Big]\\Big |^{x=L}_{x=0}=0\\\\\ni=1,2,\\cdots,n+1\\tag{1.16}\n$$\n一旦形状函数$\\phi_i$选择好后，可以计算上式的积分。弱形式的伽辽金描述的优势在于，只有有限数量的参数$a_i$需要确定，$i = 1, \\cdots, n + 1$，这与方程(1.1)或(1.9)中需要确定$0 \\le x < L$区间内每个点的$T(x)$值不同。在这种情况下，考虑精确解被兼容的近似所取代。\n<br>为了说明上述过程，我们将区间$[0, 1]$分为两个等长的段，并在每个段的两个端点放置一个节点。因此，三个节点定义了整个杆的温度场，即节点$1$位于$x = x_1 = 0$，节点$2$位于$x = x_2 = L/2$，节点$3$位于$x = x_3 = L$，如图1所示。\n<br><center>![图1 区间离散化](1.png)</center>\n\n如果我们假设在节点之间的$\\phi(x)$在每个单元节点$e_i$之间的变化为线性，我们可以使用下述形式表示$T(x)$:\n$$T(x)=\\phi_{i}(x)a_i+\\phi_{i+1}a_{i+1},x_i\\le x\\le x_{i+1}\\tag{1.17}$$\n如确定形状函数$\\phi_i$，使得$\\phi(x_i)=0$且$\\phi(x_{i+1})=0$，相反地$\\phi_{i+1}(x_i)=0$，$\\phi_{i+1}(x_{i+1})=1$，函数$\\phi_i$由下式给出：\n$$\\phi_i(x)=\\frac{x_{i+1}-x}{x_{i+1}-x_i}\\tag{1.18a}$$\n$$\\phi_{i+1}(x)=\\frac{x-x_i}{x_{i+1}-x_i}\\tag{1.18b}$$\n参数$a_i$为节点温度，即$a_i=T(x_i)=T_i$，形状函数的导数为\n$$\\frac{d\\phi_i}{dx}=-\\frac{1}{x_{i+1}-x_i}\\tag{1.19a}$$\n$$\\frac{d\\phi_{i+1}}{dx}=\\frac{1}{x_{i+1}-x_i}\\tag{1.19b}$$\n<br><center>![图2 一个单元上的形状函数](2.png)</center>\n\n方程（1.17）~（1.19）可以使用矩阵形式表述为\n$$T(x)=\\phi \\boldsymbol{a}\\tag{1.20}$$\n式中\n$$\\phi=\\begin{matrix}\n[\\phi_i &\\phi_{i+1}]\n\\end{matrix}\\tag{1.21}$$\n由此得到\n$$\\frac{dT}{dx}=\\frac{d}{dx}\\phi\\boldsymbol{a}=\n\\begin{matrix}\n\\Big[\\frac{d\\phi_i}{dx}&\\frac{d\\phi_{i+1}}{dx}\\Big]\n\\end{matrix}\n\\Big[\n\\begin{matrix}\na_i\\\\a_{i+1}\n\\end{matrix}\n\\Big]\\tag{1.22}$$\n其中\n$$\\frac{d}{dx}\\phi=\\Big[\n\\begin{matrix}\n-\\frac{1}{x_{i+1}-x_i}&\\frac{1}{x_{i+1}-x_i}\n\\end{matrix}\n\\Big]\\tag{1.23}$$\n现在可将以上方程带入到方程（1.16）中，得到\n$$\\sum^2_{j=1}K\\Big[\\int^{L/2}_0\\frac{d\\phi_1}{dx}\\frac{d\\phi_j}{dx}dx\\Big]a_j-\\int^{L/2}_0\\phi_1(x)Qdx-K\\phi_1(x)\\frac{dT}{dx}\\Big|^{x=L/2}_{x=0}=0\\\\ \\tag{1.24a}$$\n和\n$$\\sum^2_{j=1}K\\Big[\\int^{L/2}_0\\frac{d\\phi_2}{dx}\\frac{d\\phi_j}{dx}dx\\Big]a_j-\\int^{L/2}_0\\phi_2(x)Qdx-K\\phi_2(x)\\frac{dT}{dx}\\Big|^{x=L/2}_{x=0}=0\\\\ \\tag{1.24b}$$\n上式使用方程（1.20）~（1.23）表述为\n$$K\\Bigg[\\int^{L/2}_0\\Big[\\frac{d}{dx}\\phi\\Big]^T\\Big[\\frac{d}{dx}\\phi\\Big]dx\\Bigg]\\boldsymbol{a}-Q\\int^{L/2}_0\\phi^Tdx-\\Bigg[\n\\begin{matrix}\nq\\\\0\n\\end{matrix}\n\\Bigg]=0\\tag{1.25}$$\n代入\n$$\\phi=\\Big[\n  \\begin{matrix}\n  1-\\frac{2x}{L}&\\frac{2x}{L}\n  \\end{matrix}\n  \\Big]$$\n和\n$$\\frac{d}{dx}\\phi=\\Big[\n  \\begin{matrix}\n  -\\frac{2}{L}&\\frac{2}{L}\n  \\end{matrix}\n  \\Big]$$\n并积分，得到\n$$\\frac{2K}{L}\\Big[\n  \\begin{matrix}\n    1&-1\\\\\n    -1&1\\\\\n  \\end{matrix}\n  \\Big]\n  \\Big[\n    \\begin{matrix}\n      a_1\\\\\n      a_2\n    \\end{matrix}\n  \\Big]-\\frac{QL}{4}\n  \\Big[\n  \\begin{matrix}\n    1\\\\1\n  \\end{matrix}  \n  \\Big]-\n  \\Big[\\begin{matrix}\n    q\\\\0\n  \\end{matrix}\n  \\Big]=\\Big[\\begin{matrix}\n    0\\\\0\n  \\end{matrix}\n  \\Big]\\tag{1.26}$$\n单元$2$使用相似的方法计算得到\n$$\\frac{2K}{L}\\Big[\n  \\begin{matrix}\n    1&-1\\\\\n    -1&1\\\\\n  \\end{matrix}\n  \\Big]\n  \\Big[\n    \\begin{matrix}\n      a_2\\\\\n      a_3\n    \\end{matrix}\n  \\Big]-\\frac{QL}{4}\n  \\Big[\n  \\begin{matrix}\n    1\\\\1\n  \\end{matrix}  \n  \\Big]-\n  \\Big[\\begin{matrix}\n    q\\\\0\n  \\end{matrix}\n  \\Big]=\\Big[\\begin{matrix}\n    0\\\\0\n  \\end{matrix}\n  \\Big]\\tag{1.27}$$\n  表达式（1.26）和（1.27）通过“组装”，即将方程（1.26）中的第二个方程和方程（1.27）中的第一个方程相加，因为它们都对应于相同的权重函数$\\phi_2(x)$，于是得到\n  $$\\frac{2K}{L}\\Bigg[\n    \\begin{matrix}\n      1&-1&0\\\\\n      -1&2&-1\\\\\n      0&-1&1\n    \\end{matrix}\n    \\Bigg]\n    \\Bigg[\n    \\begin{matrix}\n      a_1\\\\\n      a_2\\\\\n      a_3\n    \\end{matrix}\n    \\Bigg]=\n    \\Bigg[\n    \\begin{matrix}\n      q\\\\\n      0\\\\\n      0\n    \\end{matrix}\n    \\Bigg]+\\frac{QL}{4}\n    \\Bigg[\n    \\begin{matrix}\n      1\\\\\n      2\\\\\n      1\n    \\end{matrix}\n    \\Bigg]\\tag{1.28}\n  $$\n由于已知$a_3=T_L$，上述公式简化为关于未知数$a_1$和$a_2$，即\n$$a_1-a_2=\\frac{ql}{2K}+\\frac{QL^2}{8K}\\tag{1.29a}$$\n$$-a_1+2a_2=\\frac{QL^2}{4K}+T_L\\tag{1.29b}$$\n解为\n$$a_1=\\frac{qL}{K}+\\frac{QL^2}{2K}+T_L,\\\\\na_2=\\frac{qL}{2K}+\\frac{3QL^2}{8K}+T_L,\\\\\na_3=T_L\\tag{1.30}$$\n\n## 1.3 小结\n有限元方法的基本原理在于加权残差法。最常用的两种程序是***Rayleigh-Ritz方法***和***伽辽金方法***。Rayleigh-Ritz方法基于变分计算；然而，这种方法不能用于一些更复杂的方程。伽辽金方法简单易用，即使Rayleigh-Ritz方法无法应用，也能保证得到与主导微分方程兼容的近似解。\n在这两种方法中，依赖变量通过一个有限系列近似表示，其中假设解的“形状”已知，并且取决于有限数量需要确定的参数。将伽辽金近似代入主导微分方程，产生的残差函数与权重函数相乘，要求在积分意义上与权重函数正交，即\n$$\\int W(x)R(T,x)dx=0$$\n其中$R(T, x)$是残差函数（当将近似精确解$T^*$代入微分方程时得到的函数），$W(x)$是权重函数。从这些表达式中生成的一组线性代数方程允许我们确定未知参数，从而得到解的近似值。通过使用积分换元法降低二阶导数项，我们得到了“弱形式”公式。应用弱形式公式产生了一个通用的算法，可扩展到广泛的问题类别。","categories":["FEM"]},{"title":"02-有限元初步（二）（翻译）","url":"/2024/08/31/有限元初步（二）/","content":"# 摘译-使用有限元方法求解泊松方程（二）\n本内容翻译自《Plasma Simulations by Example》(Lubos Brieda，2019），用于在三维空间内求解泊松方程。本部分基于前一篇文章内容，对有限元代码进行解析。\n\n## 1 初始化\n构造函数定义：\n\n\tFESolver::FESolver(World &world, int max_it, double tol):\n\t\tworld{world}, vm{world.vm},\tmax_solver_it(max_it), tolerance(tol)\n    {\n\t    /*count number of unknowns*/\n\t    neq = 0;\n    \t/*OPEN nodes are \"h\" nodes*/\n\t    for (size_t i=0;i<vm.nodes.size();i++)\n\t\t    if (vm.nodes[i].type==NORMAL ||vm.nodes[i].type==OPEN) \n                neq++;\n\t\tcout<<\"There are \"<<neq<<\" unknowns\"<<endl;\n\t\t/*allocate neq*neq K matrix*/\n\t\tK = new double*[neq];\n\t\tfor (int i=0;i<neq;i++) \n\t\t\tK[i] = new double[neq];\n\t\tcout<<\"Allocated \"<<neq<<\"x\"<<neq<<\" stiffness matrix\"<<endl;\n\n\t\t/*allocate neq*neq J matrix*/\n\t\tJ = new double*[neq];\n\t\tfor (int i=0;i<neq;i++) \n\t\t\tJ[i] = new double[neq];\n\t\tcout<<\"Allocated \"<<neq<<\"x\"<<neq<<\" Jacobian matrix\"<<endl;\n\n\t\t/*allocate F0 and F1 vectors*/\n\t\tF0.reserve(neq);\n\t\tF1.reserve(neq);\n\t\tcout<<\"Allocated two \"<<neq<<\"x1 force vectors\"<<endl;\n\n\t\tn_nodes = vm.nodes.size();\n\t\tn_elements = vm.tets.size();\n\n\t\t/*allocate ID vector*/\n\t\tID.reserve(n_nodes);\n\t\tcout<<\"Allocated \"<<n_nodes<<\"x1 ID vector\"<<endl;\n\n\t\t/*allocate location matrix, n_elements*4 */\n\t\tLM = new int*[n_elements];\n\t\tfor (int e=0;e<n_elements;e++) \n\t\t\tLM[e] = new int[4];\n\t\tcout<<\"Allocated \"<<n_elements<<\"x4 location matrix\"<<endl;\n\n\t\t/*allocate NX matrix*/\n\t\tNX = new double**[n_elements];\n\t\tfor (int e=0;e<n_elements;e++) \n\t\t{\t\n\t\t\tNX[e] = new double*[4];\n\t\t\tfor (int a=0;a<4;a++) \n\t\t\tNX[e][a] = new double[3];\n\t\t}\n\t\tcout<<\"Allocated \"<<n_elements<<\"x4x3 NX matrix\"<<endl;\n\n\t\t/*solution array*/\n\t\td.reserve(neq); \t/*initialized to zero*/\n\n\t\t/*allocate memory for g and uh arrays*/\n\t\tg.reserve(n_nodes);\n\t\tuh.reserve(n_nodes);\n\t\tcout<<\"Allocated \"<<n_nodes<<\"x1 g and uh vector\"<<endl;\n\t\n\t\tdetJ.reserve(n_elements);\n\t\tcout<<\"Allocated \"<<n_elements<<\"x1 detJ vector\"<<endl;\n\n\t\t/*electric field*/\n\t\tef.reserve(n_elements);\n\n\t\t/*set up the ID array note valid values are 0 to neq-1 and -1 indicates \"g\" node*/\n\t\tint P=0;\n\t\tfor (int n=0;n<n_nodes;n++)\n\t\t\tif (vm.nodes[n].type==NORMAL ||\n\t\t\t\tvm.nodes[n].type==OPEN) {ID[n]=P;P++;}\n\t\t\telse ID[n]=-1;\t/*dirichlet node*/\n\n\t\t/*now set up the LM matrix*/\n\t\tfor (int e=0;e<n_elements;e++)\n\t\t\tfor (int a=0;a<4;a++)\t/*tetrahedra*/\n\t\t\t\tLM[e][a] = ID[vm.tets[e].con[a]];\n\t\tcout<<\"Built ID and LM matrix\"<<endl;\n\t\n\t\t/*set quadrature points*/\n\t\tl[0]=-sqrt(1.0/3.0); l[1]=sqrt(1.0/3.0);\n\t\tW[0]=1; W[1]=1;\n\t\tn_int = 2;\n\n\t\t/*initialize solver \"g\" array*/\n\t\tfor (int n=0;n<n_nodes;n++)\n\t\t{\n\t\t\tif (vm.nodes[n].type == INLET) g[n]=0;\t/*phi_inlet*/\n\t\t\telse if (vm.nodes[n].type == SPHERE) g[n]=-100; /*phi_sphere*/\n\t\t\telse g[n] = 0;\t/*default*/\n\t\t}\n\n\t\t/*compute NX matrix*/\n\t\tcomputeNX();\n\n\t\t/*sample assembly code*/\n\t\tstartAssembly();\n\t\tpreAssembly();\t/*this will form K and F0*/\n\t}\n\n    ","categories":["FEM"]},{"title":"01-有限元初步（一）（翻译）","url":"/2024/07/30/有限元初步（一）/","content":"# 摘译-使用有限元方法求解泊松方程（一）\n本内容翻译自《Plasma Simulations by Example》(Lubos Brieda，2019），用于在三维空间内求解泊松方程。\n\n## 1 强形式\n泊松方程可以写为\n$$\\nabla^2u\\equiv\\frac{\\partial^2u}{\\partial x^2}+\\frac{\\partial^2u}{\\partial y^2}+\\frac{\\partial^2u}{\\partial z^2}\\equiv u_{,ii}=f\\tag{1.1}$$\n\n在强形式中，我们通常将方程和边界条件写成积分形式，其中下标跟在逗号后面的表示导数，重复的下标意味着求和。这种记号方法被称为指标记号或爱因斯坦记号。我们感兴趣的是在某个空间域$\\Omega$上求解这个方程。为了获得唯一解，我们还需要指定边界条件。我们假设我们知道在边界的一个子集$\\Gamma_g$上的解。即满足**狄利克雷边界条件**。我们还假设在另一个子集$\\Gamma_h$上我们知道解的导数,即满足**纽曼边界条件**。因此，按照爱因斯坦标记法，上述强形式表述为：\n<br>给定$f$：$\\Omega\\rightarrow R$，$g:\\Gamma_g\\rightarrow R$，且$h:\\Gamma_h\\rightarrow R$，寻找$u:\\Omega\\rightarrow R$使得$-ku_{,ii}=f(\\Omega)$,$u=g(\\Gamma_g)$\n\n<br>针对泊松方程求解问题，$u=\\phi，k=1$且$f=\\rho/\\epsilon_0$。需要注意的是，$\\Gamma_g\\notin\\emptyset$，但是$\\Gamma_h$可以是一个空集。狄利克雷边界条件是获得唯一解所必须的边界条件，但是纽曼边界条件可选。两类边界条件不需要连续，我们可以拥有多个非连续的$\\Gamma_g$和$\\Gamma_h$区域。\n\n## 2 弱形式\n弱形式使用两种函数定义解：\n\n* 试解\n* 权重函数（变量）\n<br>解需要满足边界条件，即在$\\Gamma_g$上$u=g$。同时要求解的导数平方可积：\n<br>$$\\int_\\Omega(u_{,i})^2d\\Omega<\\infty\\tag{2.1}$$\n<br>满足上述条件的函数称作$H^1$函数，因此$u\\in H^1$。试解的集合由下式给出：$S=\\{u|u\\in H^1,u=g | \\Gamma_g\\}$\n<br>权重函数与解相似，不同的是他们只满足$g$边界条件的齐次形式：\n$V=\\{w|w\\in H^1,w=0|\\Gamma_g\\}$\n<br>于是弱形式由下述形式给出：\n<br>给定$f:\\Omega\\rightarrow R, g:\\Gamma_g\\rightarrow R, h:\\Gamma_h\\rightarrow R, 找到u\\in S,使得对所有的w\\in V,满足\\int_\\Omega w_{,i}(ku_{,i})d\\Omega=\\int_\\Omega wfd\\Omega+\\int_{\\Omega_h}whd\\Gamma$\n\n<br>与强形式不同，弱形式通过$u$的导数来定义解。这两个解是相同的，如果$u$是$(S)$的解，那么它也是$(W)$的解，如果$u$是$(W)$的解，那么它也是$(S)$的解。我们现在定义几个新的算子以简化记号:\n$$a(w,u)=\\int_\\Omega w_{,i}ku_{,i}d\\Omega\\tag{2.2}$$\n$$(w,f)=\\int_\\Omega wfd\\Omega\\tag{2.3}$$\n$$(w,f)=\\int_{\\Omega_h}wfd\\Omega\\tag{2.4}$$\n\n## 3 伽辽金形式\n接下来在离散化域$\\Omega_h$上近似弱形式。第一步是构建$S$和$V$的有限维近似。代替连续函数，我们现在有了子集$S^h$和$V^h$，其中$S^h\\in S$，$V^h\\in V$。下标$h$表示与网格相关联的属性。因此，如果$u^h\\in S^h$，则$u^h\\in S$。边界条件也成立，即$u^h = g$在$\\Gamma_g$上成立。同样，$V^h$的所有成员在$\\Gamma_g$上消失。然后，我们可以让$S^h$的每个成员由下式表述：\n$$u^h=v^h+g^h\\tag{3.1}$$\n式中$v^h\\in V^h$，$g^h$为在$\\Gamma_g$上满足$u=g$的集合，于是有了伽辽金形式的描述。\n>给定$f$，$g$和$h$，寻找$u^h=v^h+g^h\\in S^h$，使得对于所有的$w^h\\in V^h$，$a(w^h,v^h)=(w^h,f)+(w^h,h)_\\Gamma-a(w^h,g^h)$\n\n## 4 形函数\n假设我们的域由$\\eta = \\{0, 1, …, n_{np−1}\\}$个节点组成。在这些节点中，狄利克雷$g$边界条件被指定的节点由$\\eta_g$给出。那么，$\\eta - \\eta_g$就是解$u^h$需要被确定的节点子集。接下来，我们让$V^h$的成员采取以下形式：\n$$w^h(\\vec{x})=\\sum_{A\\in\\eta-\\eta_g}N_A(\\vec{x})c_A\\tag{4.1}$$\n$$v^h(\\vec{x})=\\sum_{A\\in\\eta-\\eta_g}N_A(\\vec{x})d_A\\tag{4.2}$$\n式中$d_A$为要求解的未知变量。$g$的节点值使用形函数插值得到：\n$$g^h(\\vec{x})=\\sum_{A\\in\\eta_g}N_A(\\vec{x})g_A,g_A=g(\\vec{x_A})\\tag{4.3}$$\n将这些插值函数代入到伽辽金表达式中，得到\n$$\\sum_{B\\in\\eta-\\eta_g}a(N_A,N_B)d_B=(N_A,f)+(N_A,h)_\\Gamma-\\sum_{B\\in\\eta_g}a(N_A,N_B)g_B,$$\n$$A\\in\\eta-\\eta_g\\tag{4.4}$$\n\n## 5 矩阵形式\n定义$K_{AB}=a(N_A,N_B)$，$F_A=(N_A,f)+(N_A,h)_\\Gamma-\\sum_{B\\in\\eta_g}a(N_A,N_B)g_B,A\\in\\eta-\\eta_g$，则式（4.4）变为\n$$\\sum_{B\\in\\eta-\\eta_g}K_{AB}d_B=F_A\\tag{5.1}$$\n进一步使用矩阵形式表述为\n$$\\boldsymbol{K}=[K_{AB}]=\n\\left[\n  \\begin{matrix}\n  K_{0,0}&K_{0,1}&...&K_{0,n-1}\\\\\n  K_{1,0}&K_{1,1}&...&K_{1,n-1}\\\\\n  ...&...&...&...\\\\\n  K_{n-1,0}&K_{n-1,1}&...&K_{n-1,n-1}\n  \\end{matrix}\n  \\right]\\tag{5.2}$$\n$$\\vec{F}=\\{F_A\\}=\n\\left\\{\n  \\begin{matrix}\n  F_0\\\\\n  F_1\\\\\n  ...\\\\\n  F_{n-1}\n  \\end{matrix}\n  \\right\\}\\tag{5.3}$$\n$$\\vec{d}=\\{d_B\\}=\n\\left\\{\n  \\begin{matrix}\n  d_0\\\\\n  d_1\\\\\n  ...\\\\\n  d_{n-1}\n  \\end{matrix}\n  \\right\\}\n$$\n上述矩阵形式表述为\n$$\\boldsymbol{K}\\vec{d}=\\vec{F}\\tag{5.4}$$\n式中$K$为***刚度矩阵***，$\\vec{F}$为受力项，$\\vec{d}$为位移矢量。矩阵形式表述为\n<br>给定系数矩阵$\\boldsymbol{K}$和向量$\\vec{F}$，寻找$\\vec{d}$满足$\\boldsymbol{K}\\vec{d}=\\vec{F}$,其中$\\boldsymbol{K}=[K_{PQ}]$，$\\vec{d}=\\{d_q\\}$，$\\vec{F}=\\{F_p\\}$，$0\\le P,Q<n_{eq}，K_{PQ}=a(N_A,N_B)，P=ID(A),Q=ID(B)，F_P=(N_A,f)+(N_A,h)_\\Gamma-\\sum_{B\\in\\eta_{eq}}a(N_A,N_B)G_B$\n\n需要注意的是，我们只对未知节点$n_{eq}=n_{np}-n_g$应用上述等式，我们需要找到节点标号与未知方程标号的对应关系，我们根据Hughes标记法将其称为ID：\n$$ID(A)=\n\\begin{cases}\nP&A\\in\\eta-\\eta_g\\\\\n0&A\\in\\eta_g\n\\end{cases}\n\\tag{5.5}$$\n\n## 6 单元视角\n上述表述使用了全局视角来表述矩阵问题。在这个视角中，空间位置和插值函数NA在物理$\\vec{x}$坐标中给出。这种表述方式并不实用，因此我们改为使用单元视角。我们让每个元素覆盖一些逻辑域，其坐标为$\\vec{\\xi} = \\{\\xi,\\eta,\\zeta\\}$。现在，插值函数$N_{0,1},…$以这些逻辑或自然坐标表示。整个域的积分现在可以重写为对所有单元的求和。\n$$\\boldsymbol{K}=\\sum^{n_{el}-1}_{e=0}\\boldsymbol{K}^e,\\boldsymbol{K}^e=[K^e_{AB}]\\tag{6.1}$$\n$$\\vec{F}=\\sum^{n_{el}-1}_{e=0}\\vec{F}_e,\\vec{F}_e=\\{F^e_A\\}\\tag{6.2}$$\n其中\n$$K^e_{AB}=a(N_A,N_B)^b=\\int_{\\Omega^e}\\nabla N_A k\\nabla N_B d\\Omega\\tag{6.3}$$\n$$F^e_p=(N_A,f)^e+(N_A,h)^e_\\Gamma-\\sum_{B\\in\\eta_g}a(N_A,N_B)^eg_B\\\\\n=\\int_{\\Omega^e}N_Afd\\Omega+\\int_{\\Gamma^e_h}N_Ahd\\Gamma-\\sum_{B\\in\\eta_g}a(N_A,N_B)^eg_B\\tag{6.4}$$\n在有限元方法中，矩阵方程的单元表述涉及到刚度矩阵的各个元素。这些元素由$a(N_A, N_B)^e$表示，其中$N_A$和$N_B$是插值函数，$e$表示元素编号。刚度矩阵的这些元素代表了该元素内部及其与相邻元素连接处的力与位移的关系。$\\Gamma^e_h$是元素$e$在边界$\\Gamma_h$上的部分，这个边界仅对于位于域边界的元素非空。此外，$P$和$Q$分别是刚度矩阵A和载荷向量B的单元编号映射，即$P = ID(A)$和$Q = ID(B)$。这里的ID表示节点编号与未知方程编号之间的映射表。\n<br>通过计算每个元素在刚度矩阵中的贡献，并将这些贡献加在一起，我们可以得到整个域的刚度矩阵。这个过程涉及到对每个元素内部及其与相邻元素的交界面进行积分。这种方法使得我们可以有效地处理复杂的几何形状和边界条件，同时确保解在指定的边界上满足给定的条件。\n<br>对单个单元重写上述公式为\n$$k^e=[k^e_{ab}],f^e=\\{f^e_a\\},0\\le a,b<n_{en}\\tag{6.5} $$\n$$k^e_{ab}=a(N_a,N_b)^e=\\int_{\\Omega^e}N_afd\\Omega+\\int_{\\Omega^e}N_ahd\\Gamma-\\sum^{n_{en}}_{b=1}k^e_{ab}q^e_b\\tag{6.6}$$\n\n## 7 正交\n假设存在一个从物理坐标到自然（或逻辑）坐标$\\vec{\\eta}=(\\xi,\\eta,\\zeta)$的映射，使得：\n$$x(\\vec{\\eta})=\\sum^4_{a=1}N_a(\\vec{\\xi})\\vec{x}^e_a\\tag{7.1}$$\n式中$\\vec{x}^e_a$是组成单元$e$的四个节点的位置，且$\\xi，\\eta，\\zeta\\in[-1:1]$。这个公式描述了物理坐标可以作为逻辑坐标的函数，可用于对节点位置的插值计算。接下来将积分转换为$\\vec{\\xi}$空间下的积分：\n$$\\int_{\\Omega^e}f(\\vec{x})dxdydz=\\int^1_{-1}\\int^1_{-1}\\int^1_{-1}f(x(\\vec{\\xi}),y(\\vec{\\xi}),z(\\vec{\\xi}))j(\\vec{\\xi})d\\xi d\\eta d\\zeta\\tag{7.2}$$\n式中$j(\\vec{\\xi})=\\partial x_i/\\partial\\xi_i$称为***雅可比矩阵***。\n\n## 8 形状函数及坐标转换\n下面求解\n$$k^e_{ab}=a(N_a,N_b)^e=\\int_{\\Omega^e}N_{a,i}kN_{b,i}d\\Omega\\tag{8.1}$$\n我们可以在逻辑坐标空间$\\vec{\\xi}$中计算。使用链式法则，\n$$\\frac{\\partial N_a}{\\partial x}=\\frac{\\partial N_a}{\\partial\\xi}\\frac{\\partial\\xi}{\\partial x}+\\frac{\\partial N_a}{\\partial\\eta}\\frac{\\partial\\eta}{\\partial x}\\tag{8.2}$$\n或使用爱因斯坦标记法表示为\n$$N_{a,x}=N_{a,\\xi}\\xi_{,x}+N_{a,\\eta}\\eta_{,x}\\tag{8.3}$$\n相似地，\n$$N_{a,y}=N_{a,\\xi}\\xi_{,y}+N_{a,\\eta}\\eta_{,y}\\tag{8.4}$$\n从上式可以得到，我们需要获得$N_a$在逻辑空间中的形函数，$N_a=N_a(\\xi)$。我们也需要映射$\\vec{\\xi}_{,\\vec{x}}$的表达式，于是有\n$$\\int\\Omega f(\\vec{x})d\\Omega=\\int_\\xi f(\\vec{\\xi})|\\vec{x}_{,\\vec{\\xi}}|d\\vec{\\xi}\\tag{8.5}$$\n将式（8.4）和式（8.5）重写为矩阵形式\n$$\\left\\{\n  \\begin{matrix}\n  N_{a,x}\\\\\n  N_{a,y}\n  \\end{matrix}\n  \\right\\}=\n  \\left\\{\n  \\begin{matrix}\n  N_{a,\\xi}\\\\\n  N_{a,\\eta}\n  \\end{matrix}\n  \\right\\}\n  \\left[\n  \\begin{matrix}\n  \\xi_x&\\xi_y\\\\\n  \\eta_x&\\eta_y\n  \\end{matrix}\n  \\right]\\tag{8.6}\n  $$\n  根据$x(\\xi,\\eta)=\\sum^2_{a=0}N_a(\\xi,\\eta)x^e_a，y(\\xi,\\eta)=\\sum^2_{a=0}N_a(\\xi,\\eta)y^e_a$，计算得到\n  $$\\vec{x}_{,\\vec{\\xi}}=\n    \\left[\n  \\begin{matrix}\n  x_{,\\xi}&x_{,\\eta}\\\\\n  y_{,\\xi}&y_{,\\eta}\n  \\end{matrix}\n  \\right]\\tag{8.6}\n  $$\n  而$\\vec{\\xi_{,\\vec{x}}}=(\\vec{x}_{,\\xi})^{-1}$。\n<br>根据以上内容，计算任意单元内$N_{a,x}$和$N_{b,x}$的步骤如下：\n<br>1.计算正交点$l_{\\xi}$处的$N_{a,\\xi}$；\n<br>2.使用$N_{a,\\xi}$计算$\\vec{x}_{,\\vec{\\xi}}$;\n<br>3.计算$\\vec{\\xi_{,\\vec{x}}}=(\\vec{x}_{,\\xi})^{-1}$；\n<br>4.使用$N_{a,\\xi}\\xi_{,x}$计算$N_{a,x}$\n<br>5.对b重复1-4。","categories":["FEM"]}]